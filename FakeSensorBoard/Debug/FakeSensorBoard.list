
FakeSensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007580  08007580  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007588  08007588  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007588  08007588  00017588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c88  20000074  08007604  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005cfc  08007604  00025cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbba  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf4  00000000  00000000  0003fc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00043958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001838  00000000  00000000  000452e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e4c  00000000  00000000  00046b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de6f  00000000  00000000  0004a964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec15  00000000  00000000  000687d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001473e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ffc  00000000  00000000  00147438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800749c 	.word	0x0800749c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800749c 	.word	0x0800749c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc14 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f820 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f944 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f918 	bl	8000758 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000528:	f000 f888 	bl	800063c <MX_I2C1_Init>
  MX_I2C2_Init();
 800052c:	f000 f8b4 	bl	8000698 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000530:	f000 f8e0 	bl	80006f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f004 f8d8 	bl	80046e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <main+0x40>)
 800053a:	2100      	movs	r1, #0
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x44>)
 800053e:	f004 f91d 	bl	800477c <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <main+0x48>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  threads_init();
 8000548:	f006 fe8a 	bl	8007260 <threads_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f004 f8f0 	bl	8004730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x3c>
 8000552:	bf00      	nop
 8000554:	080074e4 	.word	0x080074e4
 8000558:	08000889 	.word	0x08000889
 800055c:	200001d4 	.word	0x200001d4

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f006 feca 	bl	8007308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <SystemClock_Config+0xd4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xd4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xd4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xd8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a22      	ldr	r2, [pc, #136]	; (8000638 <SystemClock_Config+0xd8>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemClock_Config+0xd8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005de:	2304      	movs	r3, #4
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 ffa0 	bl	8003534 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005fa:	f000 f95f 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fc0e 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000626:	f000 f949 	bl	80008bc <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 48;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2230      	movs	r2, #48	; 0x30
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2201      	movs	r2, #1
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 208;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	22d0      	movs	r2, #208	; 0xd0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f000 fe65 	bl	8001348 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 f91a 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000090 	.word	0x20000090
 8000690:	40005400 	.word	0x40005400
 8000694:	000186a0 	.word	0x000186a0

08000698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C2_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2C2_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_I2C2_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 238;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006b0:	22ee      	movs	r2, #238	; 0xee
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C2_Init+0x50>)
 80006d6:	f000 fe37 	bl	8001348 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f8ec 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000e4 	.word	0x200000e4
 80006ec:	40005800 	.word	0x40005800
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_SPI2_Init+0x5c>)
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_SPI2_Init+0x60>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI2_Init+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI2_Init+0x5c>)
 800071e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000722:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI2_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI2_Init+0x5c>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_SPI2_Init+0x5c>)
 800073e:	f003 f997 	bl	8003a70 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 f8b8 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000138 	.word	0x20000138
 8000754:	40003800 	.word	0x40003800

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f003 fca4 	bl	80040dc <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f88f 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000190 	.word	0x20000190
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	; (800087c <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_GPIO_Init+0xd0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fd6c 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xd8>)
 8000854:	f000 fbca 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000870:	f000 fbbc 	bl	8000fec <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f004 f805 	bl	80048a0 <osDelay>
 8000896:	e7fb      	b.n	8000890 <StartDefaultTask+0x8>

08000898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008aa:	f000 fa6d 	bl	8000d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40010000 	.word	0x40010000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <HAL_MspInit+0x54>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x54>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_MspInit+0x54>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_MspInit+0x54>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f000 fb13 	bl	8000f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a42      	ldr	r2, [pc, #264]	; (8000a48 <HAL_I2C_MspInit+0x128>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12d      	bne.n	800099e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a40      	ldr	r2, [pc, #256]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800095e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000964:	2312      	movs	r3, #18
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000970:	2304      	movs	r3, #4
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4835      	ldr	r0, [pc, #212]	; (8000a50 <HAL_I2C_MspInit+0x130>)
 800097c:	f000 fb36 	bl	8000fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 800098a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800099c:	e050      	b.n	8000a40 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <HAL_I2C_MspInit+0x134>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d14b      	bne.n	8000a40 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009f2:	2304      	movs	r3, #4
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4814      	ldr	r0, [pc, #80]	; (8000a50 <HAL_I2C_MspInit+0x130>)
 80009fe:	f000 faf5 	bl	8000fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	2312      	movs	r3, #18
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a14:	2304      	movs	r3, #4
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <HAL_I2C_MspInit+0x138>)
 8000a20:	f000 fae4 	bl	8000fec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x12c>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40005800 	.word	0x40005800
 8000a58:	40020800 	.word	0x40020800

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <HAL_SPI_MspInit+0xe0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d15a      	bne.n	8000b34 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a2e      	ldr	r2, [pc, #184]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_SPI_MspInit+0xe4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4815      	ldr	r0, [pc, #84]	; (8000b44 <HAL_SPI_MspInit+0xe8>)
 8000aee:	f000 fa7d 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af2:	2304      	movs	r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b02:	2305      	movs	r3, #5
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <HAL_SPI_MspInit+0xe8>)
 8000b0e:	f000 fa6d 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b24:	2305      	movs	r3, #5
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_SPI_MspInit+0xec>)
 8000b30:	f000 fa5c 	bl	8000fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40003800 	.word	0x40003800
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000bc2:	f000 fa13 	bl	8000fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2019      	movs	r0, #25
 8000bf2:	f000 f9a1 	bl	8000f38 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 f9ba 	bl	8000f70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <HAL_InitTick+0xa0>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_InitTick+0xa0>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_InitTick+0xa0>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c18:	f107 0210 	add.w	r2, r7, #16
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fa24 	bl	8003070 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c28:	f002 fa0e 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 8000c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_InitTick+0xac>)
 8000c40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c5e:	f002 ff90 	bl	8003b82 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c6a:	f002 ffe3 	bl	8003c34 <HAL_TIM_Base_Start_IT>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	200001d8 	.word	0x200001d8
 8000c88:	40010000 	.word	0x40010000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cbe:	f003 f829 	bl	8003d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200001d8 	.word	0x200001d8

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f006 fabf 	bl	80072a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fbf7 	bl	8000514 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d34:	08007590 	.word	0x08007590
  ldr r2, =_sbss
 8000d38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d3c:	20005cfc 	.word	0x20005cfc

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f8d8 	bl	8000f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f7ff ff32 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fda6 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000220 	.word	0x20000220

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000220 	.word	0x20000220

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff4c 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4a:	f7ff ff61 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff ffb1 	bl	8000ebc <NVIC_EncodePriority>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff80 	bl	8000e68 <__NVIC_SetPriority>
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff54 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d004      	beq.n	8000faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00c      	b.n	8000fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2205      	movs	r2, #5
 8000fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fde:	b2db      	uxtb	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e165      	b.n	80012d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8154 	bne.w	80012ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80ae 	beq.w	80012ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <HAL_GPIO_Init+0x300>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b5a      	ldr	r3, [pc, #360]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a58      	ldr	r2, [pc, #352]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_GPIO_Init+0x308>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x21a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x216>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4d      	ldr	r2, [pc, #308]	; (80012fc <HAL_GPIO_Init+0x310>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x212>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x20e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x20a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x206>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x202>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x304>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_GPIO_Init+0x324>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_GPIO_Init+0x324>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae96 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e12b      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fad6 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2224      	movs	r2, #36	; 0x24
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ac:	f001 fe38 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a81      	ldr	r2, [pc, #516]	; (80015bc <HAL_I2C_Init+0x274>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d807      	bhi.n	80013cc <HAL_I2C_Init+0x84>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <HAL_I2C_Init+0x278>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e006      	b.n	80013da <HAL_I2C_Init+0x92>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a7d      	ldr	r2, [pc, #500]	; (80015c4 <HAL_I2C_Init+0x27c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0e7      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4a78      	ldr	r2, [pc, #480]	; (80015c8 <HAL_I2C_Init+0x280>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_I2C_Init+0x274>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d802      	bhi.n	800141c <HAL_I2C_Init+0xd4>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	e009      	b.n	8001430 <HAL_I2C_Init+0xe8>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_I2C_Init+0x284>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	3301      	adds	r3, #1
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	495c      	ldr	r1, [pc, #368]	; (80015bc <HAL_I2C_Init+0x274>)
 800144c:	428b      	cmp	r3, r1
 800144e:	d819      	bhi.n	8001484 <HAL_I2C_Init+0x13c>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fbb1 f3f3 	udiv	r3, r1, r3
 800145e:	1c59      	adds	r1, r3, #1
 8001460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001464:	400b      	ands	r3, r1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <HAL_I2C_Init+0x138>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e59      	subs	r1, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fbb1 f3f3 	udiv	r3, r1, r3
 8001478:	3301      	adds	r3, #1
 800147a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147e:	e051      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001480:	2304      	movs	r3, #4
 8001482:	e04f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d111      	bne.n	80014b0 <HAL_I2C_Init+0x168>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e012      	b.n	80014d6 <HAL_I2C_Init+0x18e>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Init+0x196>
 80014da:	2301      	movs	r3, #1
 80014dc:	e022      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10e      	bne.n	8001504 <HAL_I2C_Init+0x1bc>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e58      	subs	r0, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	0099      	lsls	r1, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	4313      	orrs	r3, r2
 800152a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6911      	ldr	r1, [r2, #16]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	4311      	orrs	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	000186a0 	.word	0x000186a0
 80015c0:	001e847f 	.word	0x001e847f
 80015c4:	003d08ff 	.word	0x003d08ff
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d158      	bne.n	800169c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <HAL_I2C_Slave_Transmit_IT+0x26>
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e051      	b.n	800169e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_I2C_Slave_Transmit_IT+0x38>
 8001604:	2302      	movs	r3, #2
 8001606:	e04a      	b.n	800169e <HAL_I2C_Slave_Transmit_IT+0xce>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d007      	beq.n	800162e <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2221      	movs	r2, #33	; 0x21
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2220      	movs	r2, #32
 800164a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800167e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001696:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800169c:	2302      	movs	r3, #2
  }
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	ffff0000 	.word	0xffff0000

080016b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d003      	beq.n	80016e8 <HAL_I2C_EV_IRQHandler+0x38>
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b40      	cmp	r3, #64	; 0x40
 80016e4:	f040 80c1 	bne.w	800186a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10d      	bne.n	800171e <HAL_I2C_EV_IRQHandler+0x6e>
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001708:	d003      	beq.n	8001712 <HAL_I2C_EV_IRQHandler+0x62>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001710:	d101      	bne.n	8001716 <HAL_I2C_EV_IRQHandler+0x66>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_I2C_EV_IRQHandler+0x68>
 8001716:	2300      	movs	r3, #0
 8001718:	2b01      	cmp	r3, #1
 800171a:	f000 8132 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <HAL_I2C_EV_IRQHandler+0x92>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	0a5b      	lsrs	r3, r3, #9
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f001 fb65 	bl	8002e04 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fcdc 	bl	80020f8 <I2C_Master_SB>
 8001740:	e092      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_I2C_EV_IRQHandler+0xb2>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	0a5b      	lsrs	r3, r3, #9
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fd52 	bl	8002204 <I2C_Master_ADD10>
 8001760:	e082      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0xd2>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	0a5b      	lsrs	r3, r3, #9
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fd6c 	bl	8002258 <I2C_Master_ADDR>
 8001780:	e072      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d03b      	beq.n	8001806 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179c:	f000 80f3 	beq.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	09db      	lsrs	r3, r3, #7
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00f      	beq.n	80017cc <HAL_I2C_EV_IRQHandler+0x11c>
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	0a9b      	lsrs	r3, r3, #10
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <HAL_I2C_EV_IRQHandler+0x11c>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f94c 	bl	8001a62 <I2C_MasterTransmit_TXE>
 80017ca:	e04d      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80d6 	beq.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	0a5b      	lsrs	r3, r3, #9
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80cf 	beq.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	2b21      	cmp	r3, #33	; 0x21
 80017ec:	d103      	bne.n	80017f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f9d3 	bl	8001b9a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f4:	e0c7      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	2b40      	cmp	r3, #64	; 0x40
 80017fa:	f040 80c4 	bne.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fa41 	bl	8001c86 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001804:	e0bf      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001814:	f000 80b7 	beq.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00f      	beq.n	8001844 <HAL_I2C_EV_IRQHandler+0x194>
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_I2C_EV_IRQHandler+0x194>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fab6 	bl	8001dae <I2C_MasterReceive_RXNE>
 8001842:	e011      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 809a 	beq.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	0a5b      	lsrs	r3, r3, #9
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8093 	beq.w	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fb5f 	bl	8001f24 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001866:	e08e      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001868:	e08d      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e007      	b.n	800188c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	085b      	lsrs	r3, r3, #1
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d012      	beq.n	80018be <HAL_I2C_EV_IRQHandler+0x20e>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	0a5b      	lsrs	r3, r3, #9
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80018b4:	69b9      	ldr	r1, [r7, #24]
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 ff1d 	bl	80026f6 <I2C_Slave_ADDR>
 80018bc:	e066      	b.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_I2C_EV_IRQHandler+0x22e>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	0a5b      	lsrs	r3, r3, #9
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 ff58 	bl	800278c <I2C_Slave_STOPF>
 80018dc:	e056      	b.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	2b21      	cmp	r3, #33	; 0x21
 80018e2:	d002      	beq.n	80018ea <HAL_I2C_EV_IRQHandler+0x23a>
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	2b29      	cmp	r3, #41	; 0x29
 80018e8:	d125      	bne.n	8001936 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	09db      	lsrs	r3, r3, #7
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00f      	beq.n	8001916 <HAL_I2C_EV_IRQHandler+0x266>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	0a9b      	lsrs	r3, r3, #10
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_I2C_EV_IRQHandler+0x266>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fe33 	bl	800257a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001914:	e039      	b.n	800198a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d033      	beq.n	800198a <HAL_I2C_EV_IRQHandler+0x2da>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	0a5b      	lsrs	r3, r3, #9
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d02d      	beq.n	800198a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fe60 	bl	80025f4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001934:	e029      	b.n	800198a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00f      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	0a9b      	lsrs	r3, r3, #10
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x2b2>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fe6b 	bl	8002636 <I2C_SlaveReceive_RXNE>
 8001960:	e014      	b.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00e      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	0a5b      	lsrs	r3, r3, #9
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fe99 	bl	80026b2 <I2C_SlaveReceive_BTF>
 8001980:	e004      	b.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001982:	bf00      	nop
 8001984:	e002      	b.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800198a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
 80019ee:	4613      	mov	r3, r2
 80019f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a78:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d150      	bne.n	8001b2a <I2C_MasterTransmit_TXE+0xc8>
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b21      	cmp	r3, #33	; 0x21
 8001a8c:	d14d      	bne.n	8001b2a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d01d      	beq.n	8001ad0 <I2C_MasterTransmit_TXE+0x6e>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d01a      	beq.n	8001ad0 <I2C_MasterTransmit_TXE+0x6e>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aa0:	d016      	beq.n	8001ad0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ab0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2211      	movs	r2, #17
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff62 	bl	8001992 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ace:	e060      	b.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ade:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d107      	bne.n	8001b1a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff7d 	bl	8001a12 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b18:	e03b      	b.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff35 	bl	8001992 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b28:	e033      	b.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b21      	cmp	r3, #33	; 0x21
 8001b2e:	d005      	beq.n	8001b3c <I2C_MasterTransmit_TXE+0xda>
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	2b40      	cmp	r3, #64	; 0x40
 8001b34:	d12d      	bne.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b22      	cmp	r3, #34	; 0x22
 8001b3a:	d12a      	bne.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b54:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b56:	e01c      	b.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d103      	bne.n	8001b6c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f88e 	bl	8001c86 <I2C_MemoryTransmit_TXE_BTF>
}
 8001b6a:	e012      	b.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b90:	e7ff      	b.n	8001b92 <I2C_MasterTransmit_TXE+0x130>
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b21      	cmp	r3, #33	; 0x21
 8001bb2:	d164      	bne.n	8001c7e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d012      	beq.n	8001be4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001be2:	e04c      	b.n	8001c7e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d01d      	beq.n	8001c26 <I2C_MasterTransmit_BTF+0x8c>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d01a      	beq.n	8001c26 <I2C_MasterTransmit_BTF+0x8c>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bf6:	d016      	beq.n	8001c26 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c06:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2211      	movs	r2, #17
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff feb7 	bl	8001992 <HAL_I2C_MasterTxCpltCallback>
}
 8001c24:	e02b      	b.n	8001c7e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c34:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c44:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d107      	bne.n	8001c70 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff fed2 	bl	8001a12 <HAL_I2C_MemTxCpltCallback>
}
 8001c6e:	e006      	b.n	8001c7e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fe8a 	bl	8001992 <HAL_I2C_MasterTxCpltCallback>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11d      	bne.n	8001cda <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10b      	bne.n	8001cbe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	1c9a      	adds	r2, r3, #2
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001cbc:	e073      	b.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	121b      	asrs	r3, r3, #8
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cd8:	e065      	b.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d10b      	bne.n	8001cfa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cf8:	e055      	b.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d151      	bne.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b22      	cmp	r3, #34	; 0x22
 8001d06:	d10d      	bne.n	8001d24 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d16:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d22:	e040      	b.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d015      	beq.n	8001d5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b21      	cmp	r3, #33	; 0x21
 8001d32:	d112      	bne.n	8001d5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d58:	e025      	b.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d120      	bne.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b21      	cmp	r3, #33	; 0x21
 8001d68:	d11d      	bne.n	8001da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d78:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d88:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fe36 	bl	8001a12 <HAL_I2C_MemTxCpltCallback>
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b22      	cmp	r3, #34	; 0x22
 8001dc0:	f040 80ac 	bne.w	8001f1c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d921      	bls.n	8001e16 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	f040 808c 	bne.w	8001f1c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e12:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001e14:	e082      	b.n	8001f1c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d075      	beq.n	8001f0a <I2C_MasterReceive_RXNE+0x15c>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d002      	beq.n	8001e2a <I2C_MasterReceive_RXNE+0x7c>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d16f      	bne.n	8001f0a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 ffb8 	bl	8002da0 <I2C_WaitOnSTOPRequestThroughIT>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d142      	bne.n	8001ebc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e44:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d10a      	bne.n	8001ea6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fdc1 	bl	8001a26 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ea4:	e03a      	b.n	8001f1c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2212      	movs	r2, #18
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fd76 	bl	80019a6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001eba:	e02f      	b.n	8001f1c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001eca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fd99 	bl	8001a3a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f08:	e008      	b.n	8001f1c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	605a      	str	r2, [r3, #4]
}
 8001f1a:	e7ff      	b.n	8001f1c <I2C_MasterReceive_RXNE+0x16e>
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11b      	bne.n	8001f74 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f72:	e0bd      	b.n	80020f0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d129      	bne.n	8001fd2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00a      	beq.n	8001faa <I2C_MasterReceive_BTF+0x86>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d007      	beq.n	8001faa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fd0:	e08e      	b.n	80020f0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d176      	bne.n	80020ca <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d002      	beq.n	8001fe8 <I2C_MasterReceive_BTF+0xc4>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d108      	bne.n	8001ffa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e019      	b.n	800202e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d002      	beq.n	8002006 <I2C_MasterReceive_BTF+0xe2>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d108      	bne.n	8002018 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e00a      	b.n	800202e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b10      	cmp	r3, #16
 800201c:	d007      	beq.n	800202e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002088:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d10a      	bne.n	80020b4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fcba 	bl	8001a26 <HAL_I2C_MemRxCpltCallback>
}
 80020b2:	e01d      	b.n	80020f0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2212      	movs	r2, #18
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fc6f 	bl	80019a6 <HAL_I2C_MasterRxCpltCallback>
}
 80020c8:	e012      	b.n	80020f0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d117      	bne.n	800213c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002124:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002126:	e067      	b.n	80021f8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	611a      	str	r2, [r3, #16]
}
 800213a:	e05d      	b.n	80021f8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002144:	d133      	bne.n	80021ae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b21      	cmp	r3, #33	; 0x21
 8002150:	d109      	bne.n	8002166 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	e008      	b.n	8002178 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <I2C_Master_SB+0x92>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	2b00      	cmp	r3, #0
 8002190:	d032      	beq.n	80021f8 <I2C_Master_SB+0x100>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02d      	beq.n	80021f8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021aa:	605a      	str	r2, [r3, #4]
}
 80021ac:	e024      	b.n	80021f8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	11db      	asrs	r3, r3, #7
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f003 0306 	and.w	r3, r3, #6
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f063 030f 	orn	r3, r3, #15
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	611a      	str	r2, [r3, #16]
}
 80021d2:	e011      	b.n	80021f8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10d      	bne.n	80021f8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	11db      	asrs	r3, r3, #7
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0306 	and.w	r3, r3, #6
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f063 030e 	orn	r3, r3, #14
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	611a      	str	r2, [r3, #16]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	b2da      	uxtb	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <I2C_Master_ADD10+0x26>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <I2C_Master_ADD10+0x48>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224a:	605a      	str	r2, [r3, #4]
  }
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002258:	b480      	push	{r7}
 800225a:	b091      	sub	sp, #68	; 0x44
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002266:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b22      	cmp	r3, #34	; 0x22
 8002280:	f040 8169 	bne.w	8002556 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10f      	bne.n	80022ac <I2C_Master_ADDR+0x54>
 800228c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d10b      	bne.n	80022ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	e160      	b.n	800256e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11d      	bne.n	80022f0 <I2C_Master_ADDR+0x98>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80022bc:	d118      	bne.n	80022f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	651a      	str	r2, [r3, #80]	; 0x50
 80022ee:	e13e      	b.n	800256e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d113      	bne.n	8002322 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e115      	b.n	800254e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	f040 808a 	bne.w	8002442 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002334:	d137      	bne.n	80023a6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002344:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002354:	d113      	bne.n	800237e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	e0e7      	b.n	800254e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	623b      	str	r3, [r7, #32]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e0d3      	b.n	800254e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d02e      	beq.n	800240a <I2C_Master_ADDR+0x1b2>
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d02b      	beq.n	800240a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b4:	2b12      	cmp	r3, #18
 80023b6:	d102      	bne.n	80023be <I2C_Master_ADDR+0x166>
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d125      	bne.n	800240a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d00e      	beq.n	80023e2 <I2C_Master_ADDR+0x18a>
 80023c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d00b      	beq.n	80023e2 <I2C_Master_ADDR+0x18a>
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d008      	beq.n	80023e2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e007      	b.n	80023f2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	e0a1      	b.n	800254e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e085      	b.n	800254e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d14d      	bne.n	80024e8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	2b04      	cmp	r3, #4
 8002450:	d016      	beq.n	8002480 <I2C_Master_ADDR+0x228>
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	2b02      	cmp	r3, #2
 8002456:	d013      	beq.n	8002480 <I2C_Master_ADDR+0x228>
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	2b10      	cmp	r3, #16
 800245c:	d010      	beq.n	8002480 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e007      	b.n	8002490 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800248e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249e:	d117      	bne.n	80024d0 <I2C_Master_ADDR+0x278>
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024a6:	d00b      	beq.n	80024c0 <I2C_Master_ADDR+0x268>
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d008      	beq.n	80024c0 <I2C_Master_ADDR+0x268>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d005      	beq.n	80024c0 <I2C_Master_ADDR+0x268>
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d002      	beq.n	80024c0 <I2C_Master_ADDR+0x268>
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d107      	bne.n	80024d0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	e032      	b.n	800254e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002506:	d117      	bne.n	8002538 <I2C_Master_ADDR+0x2e0>
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800250e:	d00b      	beq.n	8002528 <I2C_Master_ADDR+0x2d0>
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	2b01      	cmp	r3, #1
 8002514:	d008      	beq.n	8002528 <I2C_Master_ADDR+0x2d0>
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2b08      	cmp	r3, #8
 800251a:	d005      	beq.n	8002528 <I2C_Master_ADDR+0x2d0>
 800251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251e:	2b10      	cmp	r3, #16
 8002520:	d002      	beq.n	8002528 <I2C_Master_ADDR+0x2d0>
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	2b20      	cmp	r3, #32
 8002526:	d107      	bne.n	8002538 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002536:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002554:	e00b      	b.n	800256e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	e7ff      	b.n	800256e <I2C_Master_ADDR+0x316>
 800256e:	bf00      	nop
 8002570:	3744      	adds	r7, #68	; 0x44
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002588:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02b      	beq.n	80025ec <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d114      	bne.n	80025ec <I2C_SlaveTransmit_TXE+0x72>
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b29      	cmp	r3, #41	; 0x29
 80025c6:	d111      	bne.n	80025ec <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2221      	movs	r2, #33	; 0x21
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2228      	movs	r2, #40	; 0x28
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f9e7 	bl	80019ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d011      	beq.n	800262a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02c      	beq.n	80026aa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d114      	bne.n	80026aa <I2C_SlaveReceive_RXNE+0x74>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b2a      	cmp	r3, #42	; 0x2a
 8002684:	d111      	bne.n	80026aa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002694:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2222      	movs	r2, #34	; 0x22
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2228      	movs	r2, #40	; 0x28
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff f992 	bl	80019ce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d012      	beq.n	80026ea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002710:	2b28      	cmp	r3, #40	; 0x28
 8002712:	d127      	bne.n	8002764 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	09db      	lsrs	r3, r3, #7
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	81bb      	strh	r3, [r7, #12]
 8002746:	e002      	b.n	800274e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002756:	89ba      	ldrh	r2, [r7, #12]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff f940 	bl	80019e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002762:	e00e      	b.n	8002782 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	d172      	bne.n	80028d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b22      	cmp	r3, #34	; 0x22
 80027ee:	d002      	beq.n	80027f6 <I2C_Slave_STOPF+0x6a>
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b2a      	cmp	r3, #42	; 0x2a
 80027f4:	d135      	bne.n	8002862 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002828:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fbce 	bl	8000fd0 <HAL_DMA_GetState>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d049      	beq.n	80028ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	4a69      	ldr	r2, [pc, #420]	; (80029e4 <I2C_Slave_STOPF+0x258>)
 8002840:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fba0 	bl	8000f8c <HAL_DMA_Abort_IT>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03d      	beq.n	80028ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800285c:	4610      	mov	r0, r2
 800285e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002860:	e035      	b.n	80028ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002894:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fb98 	bl	8000fd0 <HAL_DMA_GetState>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d014      	beq.n	80028d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <I2C_Slave_STOPF+0x258>)
 80028ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fb6a 	bl	8000f8c <HAL_DMA_Abort_IT>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028c8:	4610      	mov	r0, r2
 80028ca:	4798      	blx	r3
 80028cc:	e000      	b.n	80028d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03e      	beq.n	8002958 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d112      	bne.n	800290e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d112      	bne.n	8002942 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f843 	bl	80029ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002966:	e039      	b.n	80029dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b2a      	cmp	r3, #42	; 0x2a
 800296c:	d109      	bne.n	8002982 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2228      	movs	r2, #40	; 0x28
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff f826 	bl	80019ce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b28      	cmp	r3, #40	; 0x28
 800298c:	d111      	bne.n	80029b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <I2C_Slave_STOPF+0x25c>)
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f827 	bl	80019fe <HAL_I2C_ListenCpltCallback>
}
 80029b0:	e014      	b.n	80029dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	2b22      	cmp	r3, #34	; 0x22
 80029b8:	d002      	beq.n	80029c0 <I2C_Slave_STOPF+0x234>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b22      	cmp	r3, #34	; 0x22
 80029be:	d10d      	bne.n	80029dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fff9 	bl	80019ce <HAL_I2C_SlaveRxCpltCallback>
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08002c51 	.word	0x08002c51
 80029e8:	ffff0000 	.word	0xffff0000

080029ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a04:	7bbb      	ldrb	r3, [r7, #14]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d002      	beq.n	8002a10 <I2C_ITError+0x24>
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d10a      	bne.n	8002a26 <I2C_ITError+0x3a>
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b22      	cmp	r3, #34	; 0x22
 8002a14:	d107      	bne.n	8002a26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a2c:	2b28      	cmp	r3, #40	; 0x28
 8002a2e:	d107      	bne.n	8002a40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2228      	movs	r2, #40	; 0x28
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a3e:	e015      	b.n	8002a6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a4e:	d00a      	beq.n	8002a66 <I2C_ITError+0x7a>
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b60      	cmp	r3, #96	; 0x60
 8002a54:	d007      	beq.n	8002a66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7a:	d162      	bne.n	8002b42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d020      	beq.n	8002adc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	4a6a      	ldr	r2, [pc, #424]	; (8002c48 <I2C_ITError+0x25c>)
 8002aa0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fa70 	bl	8000f8c <HAL_DMA_Abort_IT>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8089 	beq.w	8002bc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4798      	blx	r3
 8002ada:	e074      	b.n	8002bc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	4a59      	ldr	r2, [pc, #356]	; (8002c48 <I2C_ITError+0x25c>)
 8002ae2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fa4f 	bl	8000f8c <HAL_DMA_Abort_IT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d068      	beq.n	8002bc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d10b      	bne.n	8002b1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4798      	blx	r3
 8002b40:	e041      	b.n	8002bc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b60      	cmp	r3, #96	; 0x60
 8002b4c:	d125      	bne.n	8002b9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d10b      	bne.n	8002b82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe ff5b 	bl	8001a4e <HAL_I2C_AbortCpltCallback>
 8002b98:	e015      	b.n	8002bc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d10b      	bne.n	8002bc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7fe ff3a 	bl	8001a3a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10e      	bne.n	8002bf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d113      	bne.n	8002c40 <I2C_ITError+0x254>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b28      	cmp	r3, #40	; 0x28
 8002c1c:	d110      	bne.n	8002c40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <I2C_ITError+0x260>)
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fedf 	bl	80019fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	ffff0000 	.word	0xffff0000

08002c50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <I2C_DMAAbort+0x148>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	08db      	lsrs	r3, r3, #3
 8002c70:	4a4a      	ldr	r2, [pc, #296]	; (8002d9c <I2C_DMAAbort+0x14c>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a1a      	lsrs	r2, r3, #8
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00da      	lsls	r2, r3, #3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002c96:	e00a      	b.n	8002cae <I2C_DMAAbort+0x5e>
    }
    count--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d0ea      	beq.n	8002c84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	2200      	movs	r2, #0
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	2200      	movs	r2, #0
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	2200      	movs	r2, #0
 8002d02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d10e      	bne.n	8002d3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7fe fe89 	bl	8001a4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d3c:	e027      	b.n	8002d8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d44:	2b28      	cmp	r3, #40	; 0x28
 8002d46:	d117      	bne.n	8002d78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2228      	movs	r2, #40	; 0x28
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d76:	e007      	b.n	8002d88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002d88:	6978      	ldr	r0, [r7, #20]
 8002d8a:	f7fe fe56 	bl	8001a3a <HAL_I2C_ErrorCallback>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	14f8b589 	.word	0x14f8b589

08002da0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	0a1a      	lsrs	r2, r3, #8
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e008      	b.n	8002df0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d0e9      	beq.n	8002dc2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	14f8b589 	.word	0x14f8b589

08002e04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e14:	d103      	bne.n	8002e1e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e1c:	e007      	b.n	8002e2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e26:	d102      	bne.n	8002e2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0cc      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d90c      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d044      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e067      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4934      	ldr	r1, [pc, #208]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fd ff40 	bl	8000db0 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fd ff3c 	bl	8000db0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e04f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d20c      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f887 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fdfa 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	08007508 	.word	0x08007508
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_RCC_GetHCLKFreq+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003024:	f7ff fff0 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0a9b      	lsrs	r3, r3, #10
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	08007518 	.word	0x08007518

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff ffdc 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08007518 	.word	0x08007518

08003070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220f      	movs	r2, #15
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_RCC_GetClockConfig+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b0ae      	sub	sp, #184	; 0xb8
 80030da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fa:	4bcb      	ldr	r3, [pc, #812]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b0c      	cmp	r3, #12
 8003104:	f200 8206 	bhi.w	8003514 <HAL_RCC_GetSysClockFreq+0x440>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_RCC_GetSysClockFreq+0x3c>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003145 	.word	0x08003145
 8003114:	08003515 	.word	0x08003515
 8003118:	08003515 	.word	0x08003515
 800311c:	08003515 	.word	0x08003515
 8003120:	0800314d 	.word	0x0800314d
 8003124:	08003515 	.word	0x08003515
 8003128:	08003515 	.word	0x08003515
 800312c:	08003515 	.word	0x08003515
 8003130:	08003155 	.word	0x08003155
 8003134:	08003515 	.word	0x08003515
 8003138:	08003515 	.word	0x08003515
 800313c:	08003515 	.word	0x08003515
 8003140:	08003345 	.word	0x08003345
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4bb9      	ldr	r3, [pc, #740]	; (800342c <HAL_RCC_GetSysClockFreq+0x358>)
 8003146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800314a:	e1e7      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4bb8      	ldr	r3, [pc, #736]	; (8003430 <HAL_RCC_GetSysClockFreq+0x35c>)
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003152:	e1e3      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003154:	4bb4      	ldr	r3, [pc, #720]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800315c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003160:	4bb1      	ldr	r3, [pc, #708]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d071      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316c:	4bae      	ldr	r3, [pc, #696]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003178:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800317c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800318e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a4:	0150      	lsls	r0, r2, #5
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4621      	mov	r1, r4
 80031ac:	1a51      	subs	r1, r2, r1
 80031ae:	6439      	str	r1, [r7, #64]	; 0x40
 80031b0:	4629      	mov	r1, r5
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	647b      	str	r3, [r7, #68]	; 0x44
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80031c4:	4649      	mov	r1, r9
 80031c6:	018b      	lsls	r3, r1, #6
 80031c8:	4641      	mov	r1, r8
 80031ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ce:	4641      	mov	r1, r8
 80031d0:	018a      	lsls	r2, r1, #6
 80031d2:	4641      	mov	r1, r8
 80031d4:	1a51      	subs	r1, r2, r1
 80031d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80031d8:	4649      	mov	r1, r9
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80031ec:	4649      	mov	r1, r9
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4641      	mov	r1, r8
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4641      	mov	r1, r8
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4622      	mov	r2, r4
 8003202:	189b      	adds	r3, r3, r2
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	462b      	mov	r3, r5
 8003208:	460a      	mov	r2, r1
 800320a:	eb42 0303 	adc.w	r3, r2, r3
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800321c:	4629      	mov	r1, r5
 800321e:	024b      	lsls	r3, r1, #9
 8003220:	4621      	mov	r1, r4
 8003222:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003226:	4621      	mov	r1, r4
 8003228:	024a      	lsls	r2, r1, #9
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003232:	2200      	movs	r2, #0
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003238:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800323c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003240:	f7fc ffe6 	bl	8000210 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800324e:	e067      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003250:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800325c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	67bb      	str	r3, [r7, #120]	; 0x78
 800326a:	2300      	movs	r3, #0
 800326c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800326e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4621      	mov	r1, r4
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003290:	4629      	mov	r1, r5
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80032a4:	4649      	mov	r1, r9
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4641      	mov	r1, r8
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	4641      	mov	r1, r8
 80032b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80032b8:	4649      	mov	r1, r9
 80032ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d2:	4692      	mov	sl, r2
 80032d4:	469b      	mov	fp, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	eb1a 0303 	adds.w	r3, sl, r3
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	462b      	mov	r3, r5
 80032e0:	eb4b 0303 	adc.w	r3, fp, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003308:	2200      	movs	r2, #0
 800330a:	673b      	str	r3, [r7, #112]	; 0x70
 800330c:	677a      	str	r2, [r7, #116]	; 0x74
 800330e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003312:	f7fc ff7d 	bl	8000210 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4613      	mov	r3, r2
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003320:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003342:	e0eb      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d06b      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_RCC_GetSysClockFreq+0x354>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	2200      	movs	r2, #0
 8003364:	66bb      	str	r3, [r7, #104]	; 0x68
 8003366:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800336a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336e:	663b      	str	r3, [r7, #96]	; 0x60
 8003370:	2300      	movs	r3, #0
 8003372:	667b      	str	r3, [r7, #100]	; 0x64
 8003374:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003378:	4622      	mov	r2, r4
 800337a:	462b      	mov	r3, r5
 800337c:	f04f 0000 	mov.w	r0, #0
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	0159      	lsls	r1, r3, #5
 8003386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800338a:	0150      	lsls	r0, r2, #5
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4621      	mov	r1, r4
 8003392:	1a51      	subs	r1, r2, r1
 8003394:	61b9      	str	r1, [r7, #24]
 8003396:	4629      	mov	r1, r5
 8003398:	eb63 0301 	sbc.w	r3, r3, r1
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033aa:	4659      	mov	r1, fp
 80033ac:	018b      	lsls	r3, r1, #6
 80033ae:	4651      	mov	r1, sl
 80033b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b4:	4651      	mov	r1, sl
 80033b6:	018a      	lsls	r2, r1, #6
 80033b8:	4651      	mov	r1, sl
 80033ba:	ebb2 0801 	subs.w	r8, r2, r1
 80033be:	4659      	mov	r1, fp
 80033c0:	eb63 0901 	sbc.w	r9, r3, r1
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d8:	4690      	mov	r8, r2
 80033da:	4699      	mov	r9, r3
 80033dc:	4623      	mov	r3, r4
 80033de:	eb18 0303 	adds.w	r3, r8, r3
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	462b      	mov	r3, r5
 80033e6:	eb49 0303 	adc.w	r3, r9, r3
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033f8:	4629      	mov	r1, r5
 80033fa:	024b      	lsls	r3, r1, #9
 80033fc:	4621      	mov	r1, r4
 80033fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003402:	4621      	mov	r1, r4
 8003404:	024a      	lsls	r2, r1, #9
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800340e:	2200      	movs	r2, #0
 8003410:	65bb      	str	r3, [r7, #88]	; 0x58
 8003412:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003414:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003418:	f7fc fefa 	bl	8000210 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003426:	e065      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x420>
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_GetSysClockFreq+0x458>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	4618      	mov	r0, r3
 800343e:	4611      	mov	r1, r2
 8003440:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003444:	653b      	str	r3, [r7, #80]	; 0x50
 8003446:	2300      	movs	r3, #0
 8003448:	657b      	str	r3, [r7, #84]	; 0x54
 800344a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800344e:	4642      	mov	r2, r8
 8003450:	464b      	mov	r3, r9
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	0159      	lsls	r1, r3, #5
 800345c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003460:	0150      	lsls	r0, r2, #5
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4641      	mov	r1, r8
 8003468:	1a51      	subs	r1, r2, r1
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	4649      	mov	r1, r9
 800346e:	eb63 0301 	sbc.w	r3, r3, r1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003480:	4659      	mov	r1, fp
 8003482:	018b      	lsls	r3, r1, #6
 8003484:	4651      	mov	r1, sl
 8003486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348a:	4651      	mov	r1, sl
 800348c:	018a      	lsls	r2, r1, #6
 800348e:	4651      	mov	r1, sl
 8003490:	1a54      	subs	r4, r2, r1
 8003492:	4659      	mov	r1, fp
 8003494:	eb63 0501 	sbc.w	r5, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	00eb      	lsls	r3, r5, #3
 80034a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a6:	00e2      	lsls	r2, r4, #3
 80034a8:	4614      	mov	r4, r2
 80034aa:	461d      	mov	r5, r3
 80034ac:	4643      	mov	r3, r8
 80034ae:	18e3      	adds	r3, r4, r3
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	464b      	mov	r3, r9
 80034b4:	eb45 0303 	adc.w	r3, r5, r3
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c6:	4629      	mov	r1, r5
 80034c8:	028b      	lsls	r3, r1, #10
 80034ca:	4621      	mov	r1, r4
 80034cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d0:	4621      	mov	r1, r4
 80034d2:	028a      	lsls	r2, r1, #10
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034dc:	2200      	movs	r2, #0
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80034e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034e6:	f7fc fe93 	bl	8000210 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4613      	mov	r3, r2
 80034f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_RCC_GetSysClockFreq+0x458>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0f1b      	lsrs	r3, r3, #28
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003512:	e003      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800351a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003520:	4618      	mov	r0, r3
 8003522:	37b8      	adds	r7, #184	; 0xb8
 8003524:	46bd      	mov	sp, r7
 8003526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	00f42400 	.word	0x00f42400

08003534 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e28d      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8083 	beq.w	800365a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003554:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b04      	cmp	r3, #4
 800355e:	d019      	beq.n	8003594 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003568:	2b08      	cmp	r3, #8
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800356c:	4b8e      	ldr	r3, [pc, #568]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003578:	d00c      	beq.n	8003594 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d112      	bne.n	80035ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003592:	d10b      	bne.n	80035ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	4b84      	ldr	r3, [pc, #528]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d05b      	beq.n	8003658 <HAL_RCC_OscConfig+0x124>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d157      	bne.n	8003658 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e25a      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d106      	bne.n	80035c4 <HAL_RCC_OscConfig+0x90>
 80035b6:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e01d      	b.n	8003600 <HAL_RCC_OscConfig+0xcc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0xb4>
 80035ce:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a75      	ldr	r2, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0xcc>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6b      	ldr	r2, [pc, #428]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fd fbd2 	bl	8000db0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fd fbce 	bl	8000db0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e21f      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0xdc>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fd fbbe 	bl	8000db0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fd fbba 	bl	8000db0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e20b      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x104>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d06f      	beq.n	8003746 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b00      	cmp	r3, #0
 8003670:	d017      	beq.n	80036a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800367a:	2b08      	cmp	r3, #8
 800367c:	d105      	bne.n	800368a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d11c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x186>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1d3      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4937      	ldr	r1, [pc, #220]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e03a      	b.n	8003746 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCC_OscConfig+0x278>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fb67 	bl	8000db0 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fd fb63 	bl	8000db0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1b4      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <HAL_RCC_OscConfig+0x278>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fb46 	bl	8000db0 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fd fb42 	bl	8000db0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e193      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d036      	beq.n	80037c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd fb26 	bl	8000db0 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003768:	f7fd fb22 	bl	8000db0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e173      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x234>
 8003786:	e01b      	b.n	80037c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fd fb0f 	bl	8000db0 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	e00e      	b.n	80037b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003796:	f7fd fb0b 	bl	8000db0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d907      	bls.n	80037b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e15c      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
 80037a8:	40023800 	.word	0x40023800
 80037ac:	42470000 	.word	0x42470000
 80037b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	4b8a      	ldr	r3, [pc, #552]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1ea      	bne.n	8003796 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8097 	beq.w	80038fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d2:	4b83      	ldr	r3, [pc, #524]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	4b7f      	ldr	r3, [pc, #508]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a7e      	ldr	r2, [pc, #504]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b7c      	ldr	r3, [pc, #496]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b79      	ldr	r3, [pc, #484]	; (80039e4 <HAL_RCC_OscConfig+0x4b0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d118      	bne.n	800383c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380a:	4b76      	ldr	r3, [pc, #472]	; (80039e4 <HAL_RCC_OscConfig+0x4b0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a75      	ldr	r2, [pc, #468]	; (80039e4 <HAL_RCC_OscConfig+0x4b0>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fd facb 	bl	8000db0 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fd fac7 	bl	8000db0 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e118      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b6c      	ldr	r3, [pc, #432]	; (80039e4 <HAL_RCC_OscConfig+0x4b0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x31e>
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a65      	ldr	r2, [pc, #404]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
 8003850:	e01c      	b.n	800388c <HAL_RCC_OscConfig+0x358>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x340>
 800385a:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a60      	ldr	r2, [pc, #384]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a5d      	ldr	r2, [pc, #372]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0x358>
 8003874:	4b5a      	ldr	r3, [pc, #360]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a59      	ldr	r2, [pc, #356]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	4b57      	ldr	r3, [pc, #348]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003886:	f023 0304 	bic.w	r3, r3, #4
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fd fa8c 	bl	8000db0 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800389c:	f7fd fa88 	bl	8000db0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0d7      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ee      	beq.n	800389c <HAL_RCC_OscConfig+0x368>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fd fa76 	bl	8000db0 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fd fa72 	bl	8000db0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0c1      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ee      	bne.n	80038c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80ad 	beq.w	8003a60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b08      	cmp	r3, #8
 8003910:	d060      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d145      	bne.n	80039a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x4b4>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fa46 	bl	8000db0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fd fa42 	bl	8000db0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e093      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	3b01      	subs	r3, #1
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	071b      	lsls	r3, r3, #28
 8003972:	491b      	ldr	r1, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x4b4>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd fa17 	bl	8000db0 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003986:	f7fd fa13 	bl	8000db0 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e064      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x452>
 80039a4:	e05c      	b.n	8003a60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCC_OscConfig+0x4b4>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd fa00 	bl	8000db0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd f9fc 	bl	8000db0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e04d      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x4ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x480>
 80039d2:	e045      	b.n	8003a60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e040      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_RCC_OscConfig+0x538>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d030      	beq.n	8003a5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d129      	bne.n	8003a5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d122      	bne.n	8003a5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d119      	bne.n	8003a5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d10f      	bne.n	8003a5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07b      	b.n	8003b7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a92:	d009      	beq.n	8003aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	61da      	str	r2, [r3, #28]
 8003a9a:	e005      	b.n	8003aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fc ffca 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	ea42 0103 	orr.w	r1, r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	f003 0104 	and.w	r1, r3, #4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0210 	and.w	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e041      	b.n	8003c18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f839 	bl	8003c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 f9d7 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d001      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e04e      	b.n	8003cea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d022      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d01d      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_TIM_Base_Start_IT+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x80>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d111      	bne.n	8003cd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d010      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	e007      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40010400 	.word	0x40010400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40001800 	.word	0x40001800

08003d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d122      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d11b      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0202 	mvn.w	r2, #2
 8003d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8ee 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8e0 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f8f1 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0204 	mvn.w	r2, #4
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8c4 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8b6 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8c7 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0208 	mvn.w	r2, #8
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2204      	movs	r2, #4
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f89a 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f88c 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f89d 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2208      	movs	r2, #8
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f870 	bl	8003f38 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f862 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f873 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0201 	mvn.w	r2, #1
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc fd00 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b80      	cmp	r3, #128	; 0x80
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f902 	bl	80040c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f838 	bl	8003f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d107      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0220 	mvn.w	r2, #32
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8cc 	bl	80040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a40      	ldr	r2, [pc, #256]	; (8004088 <TIM_Base_SetConfig+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d00f      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3d      	ldr	r2, [pc, #244]	; (800408c <TIM_Base_SetConfig+0x118>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3c      	ldr	r2, [pc, #240]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <TIM_Base_SetConfig+0x120>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <TIM_Base_SetConfig+0x114>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d027      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	; (800408c <TIM_Base_SetConfig+0x118>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d023      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <TIM_Base_SetConfig+0x120>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a29      	ldr	r2, [pc, #164]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d017      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <TIM_Base_SetConfig+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <TIM_Base_SetConfig+0x12c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00f      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <TIM_Base_SetConfig+0x130>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <TIM_Base_SetConfig+0x134>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a24      	ldr	r2, [pc, #144]	; (80040ac <TIM_Base_SetConfig+0x138>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <TIM_Base_SetConfig+0x13c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <TIM_Base_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0xf8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0c      	ldr	r2, [pc, #48]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	615a      	str	r2, [r3, #20]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010400 	.word	0x40010400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800
 80040a8:	40001800 	.word	0x40001800
 80040ac:	40001c00 	.word	0x40001c00
 80040b0:	40002000 	.word	0x40002000

080040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e03f      	b.n	800416e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc fd22 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f829 	bl	8004178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b0c0      	sub	sp, #256	; 0x100
 800417e:	af00      	add	r7, sp, #0
 8004180:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	68d9      	ldr	r1, [r3, #12]
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	ea40 0301 	orr.w	r3, r0, r1
 80041a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041d0:	f021 010c 	bic.w	r1, r1, #12
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041de:	430b      	orrs	r3, r1
 80041e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	6999      	ldr	r1, [r3, #24]
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	ea40 0301 	orr.w	r3, r0, r1
 80041fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b8f      	ldr	r3, [pc, #572]	; (8004444 <UART_SetConfig+0x2cc>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d005      	beq.n	8004218 <UART_SetConfig+0xa0>
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <UART_SetConfig+0x2d0>)
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe ff16 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 800421c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004220:	e003      	b.n	800422a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004222:	f7fe fefd 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8004226:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	f040 810c 	bne.w	8004450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	1891      	adds	r1, r2, r2
 8004250:	65b9      	str	r1, [r7, #88]	; 0x58
 8004252:	415b      	adcs	r3, r3
 8004254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800425a:	4621      	mov	r1, r4
 800425c:	eb12 0801 	adds.w	r8, r2, r1
 8004260:	4629      	mov	r1, r5
 8004262:	eb43 0901 	adc.w	r9, r3, r1
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427a:	4690      	mov	r8, r2
 800427c:	4699      	mov	r9, r3
 800427e:	4623      	mov	r3, r4
 8004280:	eb18 0303 	adds.w	r3, r8, r3
 8004284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004288:	462b      	mov	r3, r5
 800428a:	eb49 0303 	adc.w	r3, r9, r3
 800428e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800429e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042a6:	460b      	mov	r3, r1
 80042a8:	18db      	adds	r3, r3, r3
 80042aa:	653b      	str	r3, [r7, #80]	; 0x50
 80042ac:	4613      	mov	r3, r2
 80042ae:	eb42 0303 	adc.w	r3, r2, r3
 80042b2:	657b      	str	r3, [r7, #84]	; 0x54
 80042b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042bc:	f7fb ffa8 	bl	8000210 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <UART_SetConfig+0x2d4>)
 80042c6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	011c      	lsls	r4, r3, #4
 80042ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	1891      	adds	r1, r2, r2
 80042e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042e8:	415b      	adcs	r3, r3
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042f0:	4641      	mov	r1, r8
 80042f2:	eb12 0a01 	adds.w	sl, r2, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	eb43 0b01 	adc.w	fp, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800430c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004310:	4692      	mov	sl, r2
 8004312:	469b      	mov	fp, r3
 8004314:	4643      	mov	r3, r8
 8004316:	eb1a 0303 	adds.w	r3, sl, r3
 800431a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800431e:	464b      	mov	r3, r9
 8004320:	eb4b 0303 	adc.w	r3, fp, r3
 8004324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004334:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800433c:	460b      	mov	r3, r1
 800433e:	18db      	adds	r3, r3, r3
 8004340:	643b      	str	r3, [r7, #64]	; 0x40
 8004342:	4613      	mov	r3, r2
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
 800434a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800434e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004352:	f7fb ff5d 	bl	8000210 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4611      	mov	r1, r2
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <UART_SetConfig+0x2d4>)
 800435e:	fba3 2301 	umull	r2, r3, r3, r1
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2264      	movs	r2, #100	; 0x64
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	1acb      	subs	r3, r1, r3
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <UART_SetConfig+0x2d4>)
 8004374:	fba3 2302 	umull	r2, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004380:	441c      	add	r4, r3
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800438c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	63b9      	str	r1, [r7, #56]	; 0x38
 800439c:	415b      	adcs	r3, r3
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6339      	str	r1, [r7, #48]	; 0x30
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043f8:	460b      	mov	r3, r1
 80043fa:	18db      	adds	r3, r3, r3
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fe:	4613      	mov	r3, r2
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800440a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800440e:	f7fb feff 	bl	8000210 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <UART_SetConfig+0x2d4>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <UART_SetConfig+0x2d4>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 0207 	and.w	r2, r3, #7
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4422      	add	r2, r4
 800443e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004440:	e105      	b.n	800464e <UART_SetConfig+0x4d6>
 8004442:	bf00      	nop
 8004444:	40011000 	.word	0x40011000
 8004448:	40011400 	.word	0x40011400
 800444c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800445a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800445e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004462:	4642      	mov	r2, r8
 8004464:	464b      	mov	r3, r9
 8004466:	1891      	adds	r1, r2, r2
 8004468:	6239      	str	r1, [r7, #32]
 800446a:	415b      	adcs	r3, r3
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004472:	4641      	mov	r1, r8
 8004474:	1854      	adds	r4, r2, r1
 8004476:	4649      	mov	r1, r9
 8004478:	eb43 0501 	adc.w	r5, r3, r1
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	00eb      	lsls	r3, r5, #3
 8004486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800448a:	00e2      	lsls	r2, r4, #3
 800448c:	4614      	mov	r4, r2
 800448e:	461d      	mov	r5, r3
 8004490:	4643      	mov	r3, r8
 8004492:	18e3      	adds	r3, r4, r3
 8004494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004498:	464b      	mov	r3, r9
 800449a:	eb45 0303 	adc.w	r3, r5, r3
 800449e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044be:	4629      	mov	r1, r5
 80044c0:	008b      	lsls	r3, r1, #2
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c8:	4621      	mov	r1, r4
 80044ca:	008a      	lsls	r2, r1, #2
 80044cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044d0:	f7fb fe9e 	bl	8000210 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4b60      	ldr	r3, [pc, #384]	; (800465c <UART_SetConfig+0x4e4>)
 80044da:	fba3 2302 	umull	r2, r3, r3, r2
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	011c      	lsls	r4, r3, #4
 80044e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	1891      	adds	r1, r2, r2
 80044fa:	61b9      	str	r1, [r7, #24]
 80044fc:	415b      	adcs	r3, r3
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004504:	4641      	mov	r1, r8
 8004506:	1851      	adds	r1, r2, r1
 8004508:	6139      	str	r1, [r7, #16]
 800450a:	4649      	mov	r1, r9
 800450c:	414b      	adcs	r3, r1
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800451c:	4659      	mov	r1, fp
 800451e:	00cb      	lsls	r3, r1, #3
 8004520:	4651      	mov	r1, sl
 8004522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004526:	4651      	mov	r1, sl
 8004528:	00ca      	lsls	r2, r1, #3
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	4603      	mov	r3, r0
 8004530:	4642      	mov	r2, r8
 8004532:	189b      	adds	r3, r3, r2
 8004534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004538:	464b      	mov	r3, r9
 800453a:	460a      	mov	r2, r1
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	67bb      	str	r3, [r7, #120]	; 0x78
 800454e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800455c:	4649      	mov	r1, r9
 800455e:	008b      	lsls	r3, r1, #2
 8004560:	4641      	mov	r1, r8
 8004562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004566:	4641      	mov	r1, r8
 8004568:	008a      	lsls	r2, r1, #2
 800456a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800456e:	f7fb fe4f 	bl	8000210 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <UART_SetConfig+0x4e4>)
 8004578:	fba3 1302 	umull	r1, r3, r3, r2
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	2164      	movs	r1, #100	; 0x64
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	3332      	adds	r3, #50	; 0x32
 800458a:	4a34      	ldr	r2, [pc, #208]	; (800465c <UART_SetConfig+0x4e4>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004596:	441c      	add	r4, r3
 8004598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800459c:	2200      	movs	r2, #0
 800459e:	673b      	str	r3, [r7, #112]	; 0x70
 80045a0:	677a      	str	r2, [r7, #116]	; 0x74
 80045a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045a6:	4642      	mov	r2, r8
 80045a8:	464b      	mov	r3, r9
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	415b      	adcs	r3, r3
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b6:	4641      	mov	r1, r8
 80045b8:	1851      	adds	r1, r2, r1
 80045ba:	6039      	str	r1, [r7, #0]
 80045bc:	4649      	mov	r1, r9
 80045be:	414b      	adcs	r3, r1
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045ce:	4659      	mov	r1, fp
 80045d0:	00cb      	lsls	r3, r1, #3
 80045d2:	4651      	mov	r1, sl
 80045d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d8:	4651      	mov	r1, sl
 80045da:	00ca      	lsls	r2, r1, #3
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	4642      	mov	r2, r8
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e8:	464b      	mov	r3, r9
 80045ea:	460a      	mov	r2, r1
 80045ec:	eb42 0303 	adc.w	r3, r2, r3
 80045f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	663b      	str	r3, [r7, #96]	; 0x60
 80045fc:	667a      	str	r2, [r7, #100]	; 0x64
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800460a:	4649      	mov	r1, r9
 800460c:	008b      	lsls	r3, r1, #2
 800460e:	4641      	mov	r1, r8
 8004610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004614:	4641      	mov	r1, r8
 8004616:	008a      	lsls	r2, r1, #2
 8004618:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800461c:	f7fb fdf8 	bl	8000210 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <UART_SetConfig+0x4e4>)
 8004626:	fba3 1302 	umull	r1, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2164      	movs	r1, #100	; 0x64
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	3332      	adds	r3, #50	; 0x32
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <UART_SetConfig+0x4e4>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	f003 020f 	and.w	r2, r3, #15
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4422      	add	r2, r4
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	bf00      	nop
 8004650:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	51eb851f 	.word	0x51eb851f

08004660 <__NVIC_SetPriority>:
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	; (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	; (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <SysTick_Handler+0x1c>)
 80046ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046bc:	f001 fd28 	bl	8006110 <xTaskGetSchedulerState>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d001      	beq.n	80046ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046c6:	f002 fb0f 	bl	8006ce8 <xPortSysTickHandler>
  }
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010

080046d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046d8:	2100      	movs	r1, #0
 80046da:	f06f 0004 	mvn.w	r0, #4
 80046de:	f7ff ffbf 	bl	8004660 <__NVIC_SetPriority>
#endif
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ee:	f3ef 8305 	mrs	r3, IPSR
 80046f2:	603b      	str	r3, [r7, #0]
  return(result);
 80046f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046fa:	f06f 0305 	mvn.w	r3, #5
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	e00c      	b.n	800471c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <osKernelInitialize+0x44>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <osKernelInitialize+0x44>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004710:	2300      	movs	r3, #0
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	e002      	b.n	800471c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800471c:	687b      	ldr	r3, [r7, #4]
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000224 	.word	0x20000224

08004730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004736:	f3ef 8305 	mrs	r3, IPSR
 800473a:	603b      	str	r3, [r7, #0]
  return(result);
 800473c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004742:	f06f 0305 	mvn.w	r3, #5
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	e010      	b.n	800476c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <osKernelStart+0x48>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d109      	bne.n	8004766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004752:	f7ff ffbf 	bl	80046d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <osKernelStart+0x48>)
 8004758:	2202      	movs	r2, #2
 800475a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800475c:	f001 f87c 	bl	8005858 <vTaskStartScheduler>
      stat = osOK;
 8004760:	2300      	movs	r3, #0
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e002      	b.n	800476c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800476c:	687b      	ldr	r3, [r7, #4]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000224 	.word	0x20000224

0800477c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af04      	add	r7, sp, #16
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800478c:	f3ef 8305 	mrs	r3, IPSR
 8004790:	617b      	str	r3, [r7, #20]
  return(result);
 8004792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004794:	2b00      	cmp	r3, #0
 8004796:	d17e      	bne.n	8004896 <osThreadNew+0x11a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d07b      	beq.n	8004896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047a2:	2318      	movs	r3, #24
 80047a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d045      	beq.n	8004842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <osThreadNew+0x48>
        name = attr->name;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <osThreadNew+0x6e>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b38      	cmp	r3, #56	; 0x38
 80047dc:	d805      	bhi.n	80047ea <osThreadNew+0x6e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <osThreadNew+0x72>
        return (NULL);
 80047ea:	2300      	movs	r3, #0
 80047ec:	e054      	b.n	8004898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <osThreadNew+0xa8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2bbb      	cmp	r3, #187	; 0xbb
 800480c:	d90a      	bls.n	8004824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <osThreadNew+0xa8>
        mem = 1;
 800481e:	2301      	movs	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e010      	b.n	8004846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10c      	bne.n	8004846 <osThreadNew+0xca>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d108      	bne.n	8004846 <osThreadNew+0xca>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <osThreadNew+0xca>
          mem = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e001      	b.n	8004846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d110      	bne.n	800486e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004854:	9202      	str	r2, [sp, #8]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fe0c 	bl	8005480 <xTaskCreateStatic>
 8004868:	4603      	mov	r3, r0
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e013      	b.n	8004896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	b29a      	uxth	r2, r3
 8004878:	f107 0310 	add.w	r3, r7, #16
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fe57 	bl	800553a <xTaskCreate>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d001      	beq.n	8004896 <osThreadNew+0x11a>
            hTask = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004896:	693b      	ldr	r3, [r7, #16]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a8:	f3ef 8305 	mrs	r3, IPSR
 80048ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <osDelay+0x1c>
    stat = osErrorISR;
 80048b4:	f06f 0305 	mvn.w	r3, #5
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e007      	b.n	80048cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 ff92 	bl	80057f0 <vTaskDelay>
    }
  }

  return (stat);
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <vApplicationGetIdleTaskMemory+0x2c>)
 80048e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a06      	ldr	r2, [pc, #24]	; (8004908 <vApplicationGetIdleTaskMemory+0x30>)
 80048ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000228 	.word	0x20000228
 8004908:	200002e4 	.word	0x200002e4

0800490c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <vApplicationGetTimerTaskMemory+0x2c>)
 800491c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4a06      	ldr	r2, [pc, #24]	; (800493c <vApplicationGetTimerTaskMemory+0x30>)
 8004922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	200004e4 	.word	0x200004e4
 800493c:	200005a0 	.word	0x200005a0

08004940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f103 0208 	add.w	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f103 0208 	add.w	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 0208 	add.w	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d103      	bne.n	8004a02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e00c      	b.n	8004a1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3308      	adds	r3, #8
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e002      	b.n	8004a10 <vListInsert+0x2e>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d2f6      	bcs.n	8004a0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6852      	ldr	r2, [r2, #4]
 8004a74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d103      	bne.n	8004a88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1e5a      	subs	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ad2:	f002 f877 	bl	8006bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	3b01      	subs	r3, #1
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	441a      	add	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d114      	bne.n	8004b52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01a      	beq.n	8004b66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3310      	adds	r3, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f929 	bl	8005d8c <xTaskRemoveFromEventList>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d012      	beq.n	8004b66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <xQueueGenericReset+0xcc>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	e009      	b.n	8004b66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3310      	adds	r3, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fef2 	bl	8004940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff feed 	bl	8004940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f002 f85d 	bl	8006c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b6a:	2301      	movs	r3, #1
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08e      	sub	sp, #56	; 0x38
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <xQueueGenericCreateStatic+0x52>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <xQueueGenericCreateStatic+0x56>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericCreateStatic+0x58>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	623b      	str	r3, [r7, #32]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <xQueueGenericCreateStatic+0x7e>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <xQueueGenericCreateStatic+0x82>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <xQueueGenericCreateStatic+0x84>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	61fb      	str	r3, [r7, #28]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c16:	2350      	movs	r3, #80	; 0x50
 8004c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b50      	cmp	r3, #80	; 0x50
 8004c1e:	d00a      	beq.n	8004c36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61bb      	str	r3, [r7, #24]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f805 	bl	8004c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3730      	adds	r7, #48	; 0x30
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c96:	2101      	movs	r1, #1
 8004c98:	69b8      	ldr	r0, [r7, #24]
 8004c9a:	f7ff ff05 	bl	8004aa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueGenericSend+0x32>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <xQueueGenericSend+0x40>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericSend+0x44>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericSend+0x46>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xQueueGenericSend+0x60>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d103      	bne.n	8004d1e <xQueueGenericSend+0x6e>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <xQueueGenericSend+0x72>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <xQueueGenericSend+0x74>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	623b      	str	r3, [r7, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d3e:	f001 f9e7 	bl	8006110 <xTaskGetSchedulerState>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <xQueueGenericSend+0x9e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <xQueueGenericSend+0xa2>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <xQueueGenericSend+0xa4>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61fb      	str	r3, [r7, #28]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d6e:	f001 ff29 	bl	8006bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <xQueueGenericSend+0xd4>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d129      	bne.n	8004dd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d8a:	f000 fa0b 	bl	80051a4 <prvCopyDataToQueue>
 8004d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	3324      	adds	r3, #36	; 0x24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fff5 	bl	8005d8c <xTaskRemoveFromEventList>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d013      	beq.n	8004dd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004da8:	4b3f      	ldr	r3, [pc, #252]	; (8004ea8 <xQueueGenericSend+0x1f8>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	e00a      	b.n	8004dd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dc0:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <xQueueGenericSend+0x1f8>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dd0:	f001 ff28 	bl	8006c24 <vPortExitCritical>
				return pdPASS;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e063      	b.n	8004ea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dde:	f001 ff21 	bl	8006c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e05c      	b.n	8004ea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f82f 	bl	8005e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dfa:	f001 ff13 	bl	8006c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dfe:	f000 fd9b 	bl	8005938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e02:	f001 fedf 	bl	8006bc4 <vPortEnterCritical>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d103      	bne.n	8004e1c <xQueueGenericSend+0x16c>
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d103      	bne.n	8004e32 <xQueueGenericSend+0x182>
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e32:	f001 fef7 	bl	8006c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e36:	1d3a      	adds	r2, r7, #4
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 f81e 	bl	8005e80 <xTaskCheckForTimeOut>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d124      	bne.n	8004e94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4c:	f000 faa2 	bl	8005394 <prvIsQueueFull>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	3310      	adds	r3, #16
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 ff44 	bl	8005cec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e66:	f000 fa2d 	bl	80052c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e6a:	f000 fd73 	bl	8005954 <xTaskResumeAll>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af7c 	bne.w	8004d6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <xQueueGenericSend+0x1f8>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	e772      	b.n	8004d6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8a:	f000 fa1b 	bl	80052c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e8e:	f000 fd61 	bl	8005954 <xTaskResumeAll>
 8004e92:	e76c      	b.n	8004d6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e96:	f000 fa15 	bl	80052c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e9a:	f000 fd5b 	bl	8005954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3738      	adds	r7, #56	; 0x38
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b090      	sub	sp, #64	; 0x40
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <xQueueGenericSendFromISR+0x3c>
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <xQueueGenericSendFromISR+0x40>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <xQueueGenericSendFromISR+0x42>
 8004eec:	2300      	movs	r3, #0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSendFromISR+0x6a>
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <xQueueGenericSendFromISR+0x6e>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <xQueueGenericSendFromISR+0x70>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	623b      	str	r3, [r7, #32]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f36:	f001 ff27 	bl	8006d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <xQueueGenericSendFromISR+0xbc>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d12f      	bne.n	8004fc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f7e:	f000 f911 	bl	80051a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d112      	bne.n	8004fb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	3324      	adds	r3, #36	; 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fef7 	bl	8005d8c <xTaskRemoveFromEventList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e007      	b.n	8004fc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	b25a      	sxtb	r2, r3
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fc6:	e001      	b.n	8004fcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3740      	adds	r7, #64	; 0x40
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xQueueReceive+0x30>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	623b      	str	r3, [r7, #32]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueReceive+0x3e>
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <xQueueReceive+0x42>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <xQueueReceive+0x44>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueReceive+0x5e>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	61fb      	str	r3, [r7, #28]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005042:	f001 f865 	bl	8006110 <xTaskGetSchedulerState>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <xQueueReceive+0x6e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <xQueueReceive+0x72>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueReceive+0x74>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xQueueReceive+0x8e>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	61bb      	str	r3, [r7, #24]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005072:	f001 fda7 	bl	8006bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01f      	beq.n	80050c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005086:	f000 f8f7 	bl	8005278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00f      	beq.n	80050ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	3310      	adds	r3, #16
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fe74 	bl	8005d8c <xTaskRemoveFromEventList>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050aa:	4b3d      	ldr	r3, [pc, #244]	; (80051a0 <xQueueReceive+0x1bc>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ba:	f001 fdb3 	bl	8006c24 <vPortExitCritical>
				return pdPASS;
 80050be:	2301      	movs	r3, #1
 80050c0:	e069      	b.n	8005196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050c8:	f001 fdac 	bl	8006c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e062      	b.n	8005196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 feba 	bl	8005e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050e4:	f001 fd9e 	bl	8006c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050e8:	f000 fc26 	bl	8005938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ec:	f001 fd6a 	bl	8006bc4 <vPortEnterCritical>
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050f6:	b25b      	sxtb	r3, r3
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d103      	bne.n	8005106 <xQueueReceive+0x122>
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800510c:	b25b      	sxtb	r3, r3
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d103      	bne.n	800511c <xQueueReceive+0x138>
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800511c:	f001 fd82 	bl	8006c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005120:	1d3a      	adds	r2, r7, #4
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fea9 	bl	8005e80 <xTaskCheckForTimeOut>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d123      	bne.n	800517c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005136:	f000 f917 	bl	8005368 <prvIsQueueEmpty>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d017      	beq.n	8005170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	3324      	adds	r3, #36	; 0x24
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fdcf 	bl	8005cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005150:	f000 f8b8 	bl	80052c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005154:	f000 fbfe 	bl	8005954 <xTaskResumeAll>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d189      	bne.n	8005072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800515e:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <xQueueReceive+0x1bc>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	e780      	b.n	8005072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f000 f8a7 	bl	80052c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005176:	f000 fbed 	bl	8005954 <xTaskResumeAll>
 800517a:	e77a      	b.n	8005072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800517c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517e:	f000 f8a1 	bl	80052c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005182:	f000 fbe7 	bl	8005954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005188:	f000 f8ee 	bl	8005368 <prvIsQueueEmpty>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	f43f af6f 	beq.w	8005072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005196:	4618      	mov	r0, r3
 8005198:	3730      	adds	r7, #48	; 0x30
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d14d      	bne.n	8005266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 ffbc 	bl	800614c <xTaskPriorityDisinherit>
 80051d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	e043      	b.n	8005266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d119      	bne.n	8005218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6858      	ldr	r0, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	461a      	mov	r2, r3
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	f002 f87c 	bl	80072ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d32b      	bcc.n	8005266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e026      	b.n	8005266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68d8      	ldr	r0, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	461a      	mov	r2, r3
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	f002 f862 	bl	80072ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	425b      	negs	r3, r3
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d207      	bcs.n	8005254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	425b      	negs	r3, r3
 800524e:	441a      	add	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d105      	bne.n	8005266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	3b01      	subs	r3, #1
 8005264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d018      	beq.n	80052bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	441a      	add	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d303      	bcc.n	80052ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68d9      	ldr	r1, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	461a      	mov	r2, r3
 80052b6:	6838      	ldr	r0, [r7, #0]
 80052b8:	f002 f818 	bl	80072ec <memcpy>
	}
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052cc:	f001 fc7a 	bl	8006bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052d8:	e011      	b.n	80052fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d012      	beq.n	8005308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3324      	adds	r3, #36	; 0x24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fd50 	bl	8005d8c <xTaskRemoveFromEventList>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052f2:	f000 fe27 	bl	8005f44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005302:	2b00      	cmp	r3, #0
 8005304:	dce9      	bgt.n	80052da <prvUnlockQueue+0x16>
 8005306:	e000      	b.n	800530a <prvUnlockQueue+0x46>
					break;
 8005308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005312:	f001 fc87 	bl	8006c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005316:	f001 fc55 	bl	8006bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005322:	e011      	b.n	8005348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d012      	beq.n	8005352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3310      	adds	r3, #16
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fd2b 	bl	8005d8c <xTaskRemoveFromEventList>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800533c:	f000 fe02 	bl	8005f44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	3b01      	subs	r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800534c:	2b00      	cmp	r3, #0
 800534e:	dce9      	bgt.n	8005324 <prvUnlockQueue+0x60>
 8005350:	e000      	b.n	8005354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800535c:	f001 fc62 	bl	8006c24 <vPortExitCritical>
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005370:	f001 fc28 	bl	8006bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800537c:	2301      	movs	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e001      	b.n	8005386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005386:	f001 fc4d 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800539c:	f001 fc12 	bl	8006bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d102      	bne.n	80053b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e001      	b.n	80053b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053b6:	f001 fc35 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e014      	b.n	80053fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053d4:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <vQueueAddToRegistry+0x50>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053e0:	490c      	ldr	r1, [pc, #48]	; (8005414 <vQueueAddToRegistry+0x50>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <vQueueAddToRegistry+0x50>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053f6:	e006      	b.n	8005406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b07      	cmp	r3, #7
 8005402:	d9e7      	bls.n	80053d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	200009a0 	.word	0x200009a0

08005418 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005428:	f001 fbcc 	bl	8006bc4 <vPortEnterCritical>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005432:	b25b      	sxtb	r3, r3
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d103      	bne.n	8005442 <vQueueWaitForMessageRestricted+0x2a>
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005448:	b25b      	sxtb	r3, r3
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d103      	bne.n	8005458 <vQueueWaitForMessageRestricted+0x40>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005458:	f001 fbe4 	bl	8006c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3324      	adds	r3, #36	; 0x24
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fc61 	bl	8005d34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005472:	6978      	ldr	r0, [r7, #20]
 8005474:	f7ff ff26 	bl	80052c4 <prvUnlockQueue>
	}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08e      	sub	sp, #56	; 0x38
 8005484:	af04      	add	r7, sp, #16
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	623b      	str	r3, [r7, #32]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	61fb      	str	r3, [r7, #28]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054c6:	23bc      	movs	r3, #188	; 0xbc
 80054c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2bbc      	cmp	r3, #188	; 0xbc
 80054ce:	d00a      	beq.n	80054e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	61bb      	str	r3, [r7, #24]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01e      	beq.n	800552c <xTaskCreateStatic+0xac>
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	2202      	movs	r2, #2
 8005502:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005506:	2300      	movs	r3, #0
 8005508:	9303      	str	r3, [sp, #12]
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	f107 0314 	add.w	r3, r7, #20
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f850 	bl	80055c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005526:	f000 f8f3 	bl	8005710 <prvAddNewTaskToReadyList>
 800552a:	e001      	b.n	8005530 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005530:	697b      	ldr	r3, [r7, #20]
	}
 8005532:	4618      	mov	r0, r3
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800553a:	b580      	push	{r7, lr}
 800553c:	b08c      	sub	sp, #48	; 0x30
 800553e:	af04      	add	r7, sp, #16
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4618      	mov	r0, r3
 8005550:	f001 fc5a 	bl	8006e08 <pvPortMalloc>
 8005554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800555c:	20bc      	movs	r0, #188	; 0xbc
 800555e:	f001 fc53 	bl	8006e08 <pvPortMalloc>
 8005562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
 8005570:	e005      	b.n	800557e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005572:	6978      	ldr	r0, [r7, #20]
 8005574:	f001 fd14 	bl	8006fa0 <vPortFree>
 8005578:	e001      	b.n	800557e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d017      	beq.n	80055b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	2300      	movs	r3, #0
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	9302      	str	r3, [sp, #8]
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f80e 	bl	80055c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055a8:	69f8      	ldr	r0, [r7, #28]
 80055aa:	f000 f8b1 	bl	8005710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e002      	b.n	80055ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055ba:	69bb      	ldr	r3, [r7, #24]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	461a      	mov	r2, r3
 80055dc:	21a5      	movs	r1, #165	; 0xa5
 80055de:	f001 fe93 	bl	8007308 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055ec:	3b01      	subs	r3, #1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f023 0307 	bic.w	r3, r3, #7
 80055fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	617b      	str	r3, [r7, #20]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01f      	beq.n	8005662 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	e012      	b.n	800564e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	7819      	ldrb	r1, [r3, #0]
 8005630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	3334      	adds	r3, #52	; 0x34
 8005638:	460a      	mov	r2, r1
 800563a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	3301      	adds	r3, #1
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	2b0f      	cmp	r3, #15
 8005652:	d9e9      	bls.n	8005628 <prvInitialiseNewTask+0x64>
 8005654:	e000      	b.n	8005658 <prvInitialiseNewTask+0x94>
			{
				break;
 8005656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005660:	e003      	b.n	800566a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	2b37      	cmp	r3, #55	; 0x37
 800566e:	d901      	bls.n	8005674 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005670:	2337      	movs	r3, #55	; 0x37
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	2200      	movs	r2, #0
 8005684:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	3304      	adds	r3, #4
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff f978 	bl	8004980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	3318      	adds	r3, #24
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f973 	bl	8004980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	3354      	adds	r3, #84	; 0x54
 80056c4:	2260      	movs	r2, #96	; 0x60
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fe1d 	bl	8007308 <memset>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	4a0c      	ldr	r2, [pc, #48]	; (8005704 <prvInitialiseNewTask+0x140>)
 80056d2:	659a      	str	r2, [r3, #88]	; 0x58
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <prvInitialiseNewTask+0x144>)
 80056d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <prvInitialiseNewTask+0x148>)
 80056de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	69b8      	ldr	r0, [r7, #24]
 80056e6:	f001 f941 	bl	800696c <pxPortInitialiseStack>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056fc:	bf00      	nop
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	08007540 	.word	0x08007540
 8005708:	08007560 	.word	0x08007560
 800570c:	08007520 	.word	0x08007520

08005710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005718:	f001 fa54 	bl	8006bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 8005724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005726:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800572e:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d110      	bne.n	800575e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800573c:	f000 fc26 	bl	8005f8c <prvInitialiseTaskLists>
 8005740:	e00d      	b.n	800575e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <prvAddNewTaskToReadyList+0xcc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	429a      	cmp	r2, r3
 8005756:	d802      	bhi.n	800575e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 8005766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <prvAddNewTaskToReadyList+0xd4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d903      	bls.n	8005784 <prvAddNewTaskToReadyList+0x74>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <prvAddNewTaskToReadyList+0xd4>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <prvAddNewTaskToReadyList+0xd8>)
 8005792:	441a      	add	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7ff f8fd 	bl	800499a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057a0:	f001 fa40 	bl	8006c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057a4:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <prvAddNewTaskToReadyList+0xcc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d207      	bcs.n	80057ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <prvAddNewTaskToReadyList+0xdc>)
 80057bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000eb4 	.word	0x20000eb4
 80057d8:	200009e0 	.word	0x200009e0
 80057dc:	20000ec0 	.word	0x20000ec0
 80057e0:	20000ed0 	.word	0x20000ed0
 80057e4:	20000ebc 	.word	0x20000ebc
 80057e8:	200009e4 	.word	0x200009e4
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d017      	beq.n	8005832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <vTaskDelay+0x60>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <vTaskDelay+0x30>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005820:	f000 f88a 	bl	8005938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005824:	2100      	movs	r1, #0
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fcfe 	bl	8006228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800582c:	f000 f892 	bl	8005954 <xTaskResumeAll>
 8005830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d107      	bne.n	8005848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <vTaskDelay+0x64>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000edc 	.word	0x20000edc
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005866:	463a      	mov	r2, r7
 8005868:	1d39      	adds	r1, r7, #4
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f832 	bl	80048d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	9202      	str	r2, [sp, #8]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	2300      	movs	r3, #0
 8005884:	460a      	mov	r2, r1
 8005886:	4924      	ldr	r1, [pc, #144]	; (8005918 <vTaskStartScheduler+0xc0>)
 8005888:	4824      	ldr	r0, [pc, #144]	; (800591c <vTaskStartScheduler+0xc4>)
 800588a:	f7ff fdf9 	bl	8005480 <xTaskCreateStatic>
 800588e:	4603      	mov	r3, r0
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <vTaskStartScheduler+0xc8>)
 8005892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005894:	4b22      	ldr	r3, [pc, #136]	; (8005920 <vTaskStartScheduler+0xc8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e001      	b.n	80058a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d102      	bne.n	80058b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058ac:	f000 fd10 	bl	80062d0 <xTimerCreateTimerTask>
 80058b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11b      	bne.n	80058f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	613b      	str	r3, [r7, #16]
}
 80058ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058cc:	4b15      	ldr	r3, [pc, #84]	; (8005924 <vTaskStartScheduler+0xcc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3354      	adds	r3, #84	; 0x54
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <vTaskStartScheduler+0xd0>)
 80058d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <vTaskStartScheduler+0xd4>)
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058de:	4b14      	ldr	r3, [pc, #80]	; (8005930 <vTaskStartScheduler+0xd8>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <vTaskStartScheduler+0xdc>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ea:	f001 f8c9 	bl	8006a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ee:	e00e      	b.n	800590e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d10a      	bne.n	800590e <vTaskStartScheduler+0xb6>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <vTaskStartScheduler+0xb4>
}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	080074c0 	.word	0x080074c0
 800591c:	08005f5d 	.word	0x08005f5d
 8005920:	20000ed8 	.word	0x20000ed8
 8005924:	200009e0 	.word	0x200009e0
 8005928:	20000010 	.word	0x20000010
 800592c:	20000ed4 	.word	0x20000ed4
 8005930:	20000ec0 	.word	0x20000ec0
 8005934:	20000eb8 	.word	0x20000eb8

08005938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <vTaskSuspendAll+0x18>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a03      	ldr	r2, [pc, #12]	; (8005950 <vTaskSuspendAll+0x18>)
 8005944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000edc 	.word	0x20000edc

08005954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005962:	4b42      	ldr	r3, [pc, #264]	; (8005a6c <xTaskResumeAll+0x118>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <xTaskResumeAll+0x2c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005980:	f001 f920 	bl	8006bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005984:	4b39      	ldr	r3, [pc, #228]	; (8005a6c <xTaskResumeAll+0x118>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3b01      	subs	r3, #1
 800598a:	4a38      	ldr	r2, [pc, #224]	; (8005a6c <xTaskResumeAll+0x118>)
 800598c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598e:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <xTaskResumeAll+0x118>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d162      	bne.n	8005a5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005996:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <xTaskResumeAll+0x11c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d05e      	beq.n	8005a5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599e:	e02f      	b.n	8005a00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a0:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <xTaskResumeAll+0x120>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3318      	adds	r3, #24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f851 	bl	8004a54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f84c 	bl	8004a54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <xTaskResumeAll+0x124>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d903      	bls.n	80059d0 <xTaskResumeAll+0x7c>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a2a      	ldr	r2, [pc, #168]	; (8005a78 <xTaskResumeAll+0x124>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <xTaskResumeAll+0x128>)
 80059de:	441a      	add	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fe ffd7 	bl	800499a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <xTaskResumeAll+0x12c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <xTaskResumeAll+0x130>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a00:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <xTaskResumeAll+0x120>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1cb      	bne.n	80059a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a0e:	f000 fb5f 	bl	80060d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <xTaskResumeAll+0x134>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a1e:	f000 f847 	bl	8005ab0 <xTaskIncrementTick>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a28:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <xTaskResumeAll+0x130>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f1      	bne.n	8005a1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <xTaskResumeAll+0x134>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <xTaskResumeAll+0x130>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <xTaskResumeAll+0x138>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a5c:	f001 f8e2 	bl	8006c24 <vPortExitCritical>

	return xAlreadyYielded;
 8005a60:	68bb      	ldr	r3, [r7, #8]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000edc 	.word	0x20000edc
 8005a70:	20000eb4 	.word	0x20000eb4
 8005a74:	20000e74 	.word	0x20000e74
 8005a78:	20000ebc 	.word	0x20000ebc
 8005a7c:	200009e4 	.word	0x200009e4
 8005a80:	200009e0 	.word	0x200009e0
 8005a84:	20000ec8 	.word	0x20000ec8
 8005a88:	20000ec4 	.word	0x20000ec4
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <xTaskGetTickCount+0x1c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a9c:	687b      	ldr	r3, [r7, #4]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000eb8 	.word	0x20000eb8

08005ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aba:	4b4f      	ldr	r3, [pc, #316]	; (8005bf8 <xTaskIncrementTick+0x148>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 808f 	bne.w	8005be2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ac4:	4b4d      	ldr	r3, [pc, #308]	; (8005bfc <xTaskIncrementTick+0x14c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005acc:	4a4b      	ldr	r2, [pc, #300]	; (8005bfc <xTaskIncrementTick+0x14c>)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d120      	bne.n	8005b1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ad8:	4b49      	ldr	r3, [pc, #292]	; (8005c00 <xTaskIncrementTick+0x150>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	603b      	str	r3, [r7, #0]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xTaskIncrementTick+0x46>
 8005af8:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <xTaskIncrementTick+0x150>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	4b41      	ldr	r3, [pc, #260]	; (8005c04 <xTaskIncrementTick+0x154>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3f      	ldr	r2, [pc, #252]	; (8005c00 <xTaskIncrementTick+0x150>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4a3f      	ldr	r2, [pc, #252]	; (8005c04 <xTaskIncrementTick+0x154>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b3e      	ldr	r3, [pc, #248]	; (8005c08 <xTaskIncrementTick+0x158>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a3d      	ldr	r2, [pc, #244]	; (8005c08 <xTaskIncrementTick+0x158>)
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	f000 fadb 	bl	80060d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b1a:	4b3c      	ldr	r3, [pc, #240]	; (8005c0c <xTaskIncrementTick+0x15c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d349      	bcc.n	8005bb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b24:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <xTaskIncrementTick+0x150>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <xTaskIncrementTick+0x15c>)
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	601a      	str	r2, [r3, #0]
					break;
 8005b36:	e03f      	b.n	8005bb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b38:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <xTaskIncrementTick+0x150>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d203      	bcs.n	8005b58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b50:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <xTaskIncrementTick+0x15c>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b56:	e02f      	b.n	8005bb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe ff79 	bl	8004a54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe ff70 	bl	8004a54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4b25      	ldr	r3, [pc, #148]	; (8005c10 <xTaskIncrementTick+0x160>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d903      	bls.n	8005b88 <xTaskIncrementTick+0xd8>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <xTaskIncrementTick+0x160>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <xTaskIncrementTick+0x164>)
 8005b96:	441a      	add	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f7fe fefb 	bl	800499a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <xTaskIncrementTick+0x168>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d3b8      	bcc.n	8005b24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb6:	e7b5      	b.n	8005b24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bb8:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <xTaskIncrementTick+0x168>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4915      	ldr	r1, [pc, #84]	; (8005c14 <xTaskIncrementTick+0x164>)
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d901      	bls.n	8005bd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bd4:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <xTaskIncrementTick+0x16c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e004      	b.n	8005bec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <xTaskIncrementTick+0x170>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <xTaskIncrementTick+0x170>)
 8005bea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bec:	697b      	ldr	r3, [r7, #20]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000edc 	.word	0x20000edc
 8005bfc:	20000eb8 	.word	0x20000eb8
 8005c00:	20000e6c 	.word	0x20000e6c
 8005c04:	20000e70 	.word	0x20000e70
 8005c08:	20000ecc 	.word	0x20000ecc
 8005c0c:	20000ed4 	.word	0x20000ed4
 8005c10:	20000ebc 	.word	0x20000ebc
 8005c14:	200009e4 	.word	0x200009e4
 8005c18:	200009e0 	.word	0x200009e0
 8005c1c:	20000ec8 	.word	0x20000ec8
 8005c20:	20000ec4 	.word	0x20000ec4

08005c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <vTaskSwitchContext+0xb0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <vTaskSwitchContext+0xb4>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c38:	e046      	b.n	8005cc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005c3a:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <vTaskSwitchContext+0xb4>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <vTaskSwitchContext+0xb8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e010      	b.n	8005c6a <vTaskSwitchContext+0x46>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <vTaskSwitchContext+0x3e>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	491d      	ldr	r1, [pc, #116]	; (8005ce0 <vTaskSwitchContext+0xbc>)
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0e4      	beq.n	8005c48 <vTaskSwitchContext+0x24>
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <vTaskSwitchContext+0xbc>)
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d104      	bne.n	8005cae <vTaskSwitchContext+0x8a>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <vTaskSwitchContext+0xc0>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <vTaskSwitchContext+0xb8>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <vTaskSwitchContext+0xc0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3354      	adds	r3, #84	; 0x54
 8005cc4:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <vTaskSwitchContext+0xc4>)
 8005cc6:	6013      	str	r3, [r2, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000edc 	.word	0x20000edc
 8005cd8:	20000ec8 	.word	0x20000ec8
 8005cdc:	20000ebc 	.word	0x20000ebc
 8005ce0:	200009e4 	.word	0x200009e4
 8005ce4:	200009e0 	.word	0x200009e0
 8005ce8:	20000010 	.word	0x20000010

08005cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60fb      	str	r3, [r7, #12]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d12:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <vTaskPlaceOnEventList+0x44>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3318      	adds	r3, #24
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fe fe61 	bl	80049e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d20:	2101      	movs	r1, #1
 8005d22:	6838      	ldr	r0, [r7, #0]
 8005d24:	f000 fa80 	bl	8006228 <prvAddCurrentTaskToDelayedList>
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	200009e0 	.word	0x200009e0

08005d34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	617b      	str	r3, [r7, #20]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3318      	adds	r3, #24
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7fe fe18 	bl	800499a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	68b8      	ldr	r0, [r7, #8]
 8005d7a:	f000 fa55 	bl	8006228 <prvAddCurrentTaskToDelayedList>
	}
 8005d7e:	bf00      	nop
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200009e0 	.word	0x200009e0

08005d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	60fb      	str	r3, [r7, #12]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3318      	adds	r3, #24
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fe49 	bl	8004a54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc2:	4b1e      	ldr	r3, [pc, #120]	; (8005e3c <xTaskRemoveFromEventList+0xb0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d11d      	bne.n	8005e06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fe40 	bl	8004a54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <xTaskRemoveFromEventList+0xb4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d903      	bls.n	8005de8 <xTaskRemoveFromEventList+0x5c>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <xTaskRemoveFromEventList+0xb4>)
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <xTaskRemoveFromEventList+0xb8>)
 8005df6:	441a      	add	r2, r3
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7fe fdcb 	bl	800499a <vListInsertEnd>
 8005e04:	e005      	b.n	8005e12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3318      	adds	r3, #24
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	480e      	ldr	r0, [pc, #56]	; (8005e48 <xTaskRemoveFromEventList+0xbc>)
 8005e0e:	f7fe fdc4 	bl	800499a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <xTaskRemoveFromEventList+0xc0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d905      	bls.n	8005e2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <xTaskRemoveFromEventList+0xc4>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e001      	b.n	8005e30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e30:	697b      	ldr	r3, [r7, #20]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000edc 	.word	0x20000edc
 8005e40:	20000ebc 	.word	0x20000ebc
 8005e44:	200009e4 	.word	0x200009e4
 8005e48:	20000e74 	.word	0x20000e74
 8005e4c:	200009e0 	.word	0x200009e0
 8005e50:	20000ec8 	.word	0x20000ec8

08005e54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <vTaskInternalSetTimeOutState+0x24>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <vTaskInternalSetTimeOutState+0x28>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	605a      	str	r2, [r3, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20000ecc 	.word	0x20000ecc
 8005e7c:	20000eb8 	.word	0x20000eb8

08005e80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60fb      	str	r3, [r7, #12]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ec2:	f000 fe7f 	bl	8006bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <xTaskCheckForTimeOut+0xbc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d102      	bne.n	8005ee6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e023      	b.n	8005f2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <xTaskCheckForTimeOut+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d007      	beq.n	8005f02 <xTaskCheckForTimeOut+0x82>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	e015      	b.n	8005f2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d20b      	bcs.n	8005f24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff9b 	bl	8005e54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	e004      	b.n	8005f2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f2e:	f000 fe79 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 8005f32:	69fb      	ldr	r3, [r7, #28]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3720      	adds	r7, #32
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000eb8 	.word	0x20000eb8
 8005f40:	20000ecc 	.word	0x20000ecc

08005f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f48:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <vTaskMissedYield+0x14>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000ec8 	.word	0x20000ec8

08005f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f64:	f000 f852 	bl	800600c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <prvIdleTask+0x28>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d9f9      	bls.n	8005f64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <prvIdleTask+0x2c>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f80:	e7f0      	b.n	8005f64 <prvIdleTask+0x8>
 8005f82:	bf00      	nop
 8005f84:	200009e4 	.word	0x200009e4
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	e00c      	b.n	8005fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a12      	ldr	r2, [pc, #72]	; (8005fec <prvInitialiseTaskLists+0x60>)
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fcca 	bl	8004940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b37      	cmp	r3, #55	; 0x37
 8005fb6:	d9ef      	bls.n	8005f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fb8:	480d      	ldr	r0, [pc, #52]	; (8005ff0 <prvInitialiseTaskLists+0x64>)
 8005fba:	f7fe fcc1 	bl	8004940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fbe:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <prvInitialiseTaskLists+0x68>)
 8005fc0:	f7fe fcbe 	bl	8004940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fc4:	480c      	ldr	r0, [pc, #48]	; (8005ff8 <prvInitialiseTaskLists+0x6c>)
 8005fc6:	f7fe fcbb 	bl	8004940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fca:	480c      	ldr	r0, [pc, #48]	; (8005ffc <prvInitialiseTaskLists+0x70>)
 8005fcc:	f7fe fcb8 	bl	8004940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fd0:	480b      	ldr	r0, [pc, #44]	; (8006000 <prvInitialiseTaskLists+0x74>)
 8005fd2:	f7fe fcb5 	bl	8004940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <prvInitialiseTaskLists+0x78>)
 8005fd8:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <prvInitialiseTaskLists+0x64>)
 8005fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <prvInitialiseTaskLists+0x7c>)
 8005fde:	4a05      	ldr	r2, [pc, #20]	; (8005ff4 <prvInitialiseTaskLists+0x68>)
 8005fe0:	601a      	str	r2, [r3, #0]
}
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	200009e4 	.word	0x200009e4
 8005ff0:	20000e44 	.word	0x20000e44
 8005ff4:	20000e58 	.word	0x20000e58
 8005ff8:	20000e74 	.word	0x20000e74
 8005ffc:	20000e88 	.word	0x20000e88
 8006000:	20000ea0 	.word	0x20000ea0
 8006004:	20000e6c 	.word	0x20000e6c
 8006008:	20000e70 	.word	0x20000e70

0800600c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006012:	e019      	b.n	8006048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006014:	f000 fdd6 	bl	8006bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006018:	4b10      	ldr	r3, [pc, #64]	; (800605c <prvCheckTasksWaitingTermination+0x50>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe fd15 	bl	8004a54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800602a:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <prvCheckTasksWaitingTermination+0x54>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3b01      	subs	r3, #1
 8006030:	4a0b      	ldr	r2, [pc, #44]	; (8006060 <prvCheckTasksWaitingTermination+0x54>)
 8006032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <prvCheckTasksWaitingTermination+0x58>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3b01      	subs	r3, #1
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <prvCheckTasksWaitingTermination+0x58>)
 800603c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800603e:	f000 fdf1 	bl	8006c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f810 	bl	8006068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <prvCheckTasksWaitingTermination+0x58>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e1      	bne.n	8006014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000e88 	.word	0x20000e88
 8006060:	20000eb4 	.word	0x20000eb4
 8006064:	20000e9c 	.word	0x20000e9c

08006068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3354      	adds	r3, #84	; 0x54
 8006074:	4618      	mov	r0, r3
 8006076:	f001 f95d 	bl	8007334 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006080:	2b00      	cmp	r3, #0
 8006082:	d108      	bne.n	8006096 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ff89 	bl	8006fa0 <vPortFree>
				vPortFree( pxTCB );
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 ff86 	bl	8006fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006094:	e018      	b.n	80060c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800609c:	2b01      	cmp	r3, #1
 800609e:	d103      	bne.n	80060a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 ff7d 	bl	8006fa0 <vPortFree>
	}
 80060a6:	e00f      	b.n	80060c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d00a      	beq.n	80060c8 <prvDeleteTCB+0x60>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60fb      	str	r3, [r7, #12]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <prvDeleteTCB+0x5e>
	}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvResetNextTaskUnblockTime+0x38>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvResetNextTaskUnblockTime+0x3c>)
 80060e2:	f04f 32ff 	mov.w	r2, #4294967295
 80060e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060e8:	e008      	b.n	80060fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ea:	4b07      	ldr	r3, [pc, #28]	; (8006108 <prvResetNextTaskUnblockTime+0x38>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a04      	ldr	r2, [pc, #16]	; (800610c <prvResetNextTaskUnblockTime+0x3c>)
 80060fa:	6013      	str	r3, [r2, #0]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	20000e6c 	.word	0x20000e6c
 800610c:	20000ed4 	.word	0x20000ed4

08006110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006116:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <xTaskGetSchedulerState+0x34>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800611e:	2301      	movs	r3, #1
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	e008      	b.n	8006136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006124:	4b08      	ldr	r3, [pc, #32]	; (8006148 <xTaskGetSchedulerState+0x38>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800612c:	2302      	movs	r3, #2
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	e001      	b.n	8006136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006136:	687b      	ldr	r3, [r7, #4]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	20000ec0 	.word	0x20000ec0
 8006148:	20000edc 	.word	0x20000edc

0800614c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d056      	beq.n	8006210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006162:	4b2e      	ldr	r3, [pc, #184]	; (800621c <xTaskPriorityDisinherit+0xd0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	429a      	cmp	r2, r3
 800616a:	d00a      	beq.n	8006182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60fb      	str	r3, [r7, #12]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60bb      	str	r3, [r7, #8]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d02c      	beq.n	8006210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d128      	bne.n	8006210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fc46 	bl	8004a54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <xTaskPriorityDisinherit+0xd4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d903      	bls.n	80061f0 <xTaskPriorityDisinherit+0xa4>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <xTaskPriorityDisinherit+0xd4>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <xTaskPriorityDisinherit+0xd8>)
 80061fe:	441a      	add	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f7fe fbc7 	bl	800499a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006210:	697b      	ldr	r3, [r7, #20]
	}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200009e0 	.word	0x200009e0
 8006220:	20000ebc 	.word	0x20000ebc
 8006224:	200009e4 	.word	0x200009e4

08006228 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006232:	4b21      	ldr	r3, [pc, #132]	; (80062b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006238:	4b20      	ldr	r3, [pc, #128]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fc08 	bl	8004a54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d10a      	bne.n	8006262 <prvAddCurrentTaskToDelayedList+0x3a>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006252:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4819      	ldr	r0, [pc, #100]	; (80062c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800625c:	f7fe fb9d 	bl	800499a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006260:	e026      	b.n	80062b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	429a      	cmp	r2, r3
 8006278:	d209      	bcs.n	800628e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe fbab 	bl	80049e2 <vListInsert>
}
 800628c:	e010      	b.n	80062b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fe fba1 	bl	80049e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d202      	bcs.n	80062b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000eb8 	.word	0x20000eb8
 80062bc:	200009e0 	.word	0x200009e0
 80062c0:	20000ea0 	.word	0x20000ea0
 80062c4:	20000e70 	.word	0x20000e70
 80062c8:	20000e6c 	.word	0x20000e6c
 80062cc:	20000ed4 	.word	0x20000ed4

080062d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062da:	f000 fb07 	bl	80068ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062de:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <xTimerCreateTimerTask+0x80>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d021      	beq.n	800632a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062ee:	1d3a      	adds	r2, r7, #4
 80062f0:	f107 0108 	add.w	r1, r7, #8
 80062f4:	f107 030c 	add.w	r3, r7, #12
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fb07 	bl	800490c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	2302      	movs	r3, #2
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2300      	movs	r3, #0
 800630e:	460a      	mov	r2, r1
 8006310:	4910      	ldr	r1, [pc, #64]	; (8006354 <xTimerCreateTimerTask+0x84>)
 8006312:	4811      	ldr	r0, [pc, #68]	; (8006358 <xTimerCreateTimerTask+0x88>)
 8006314:	f7ff f8b4 	bl	8005480 <xTaskCreateStatic>
 8006318:	4603      	mov	r3, r0
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <xTimerCreateTimerTask+0x8c>)
 800631c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <xTimerCreateTimerTask+0x8c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006326:	2301      	movs	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006346:	697b      	ldr	r3, [r7, #20]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000f10 	.word	0x20000f10
 8006354:	080074c8 	.word	0x080074c8
 8006358:	08006495 	.word	0x08006495
 800635c:	20000f14 	.word	0x20000f14

08006360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800636e:	2300      	movs	r3, #0
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	623b      	str	r3, [r7, #32]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800638e:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <xTimerGenericCommand+0x98>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02a      	beq.n	80063ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	dc18      	bgt.n	80063da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063a8:	f7ff feb2 	bl	8006110 <xTaskGetSchedulerState>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d109      	bne.n	80063c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <xTimerGenericCommand+0x98>)
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	f107 0110 	add.w	r1, r7, #16
 80063ba:	2300      	movs	r3, #0
 80063bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063be:	f7fe fc77 	bl	8004cb0 <xQueueGenericSend>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24
 80063c4:	e012      	b.n	80063ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063c6:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <xTimerGenericCommand+0x98>)
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	f107 0110 	add.w	r1, r7, #16
 80063ce:	2300      	movs	r3, #0
 80063d0:	2200      	movs	r2, #0
 80063d2:	f7fe fc6d 	bl	8004cb0 <xQueueGenericSend>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24
 80063d8:	e008      	b.n	80063ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <xTimerGenericCommand+0x98>)
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f107 0110 	add.w	r1, r7, #16
 80063e2:	2300      	movs	r3, #0
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	f7fe fd61 	bl	8004eac <xQueueGenericSendFromISR>
 80063ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3728      	adds	r7, #40	; 0x28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000f10 	.word	0x20000f10

080063fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006406:	4b22      	ldr	r3, [pc, #136]	; (8006490 <prvProcessExpiredTimer+0x94>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	3304      	adds	r3, #4
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe fb1d 	bl	8004a54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d022      	beq.n	800646e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	18d1      	adds	r1, r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	6978      	ldr	r0, [r7, #20]
 8006436:	f000 f8d1 	bl	80065dc <prvInsertTimerInActiveList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01f      	beq.n	8006480 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006440:	2300      	movs	r3, #0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2300      	movs	r3, #0
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	2100      	movs	r1, #0
 800644a:	6978      	ldr	r0, [r7, #20]
 800644c:	f7ff ff88 	bl	8006360 <xTimerGenericCommand>
 8006450:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d113      	bne.n	8006480 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	60fb      	str	r3, [r7, #12]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	b2da      	uxtb	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	6978      	ldr	r0, [r7, #20]
 8006486:	4798      	blx	r3
}
 8006488:	bf00      	nop
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20000f08 	.word	0x20000f08

08006494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800649c:	f107 0308 	add.w	r3, r7, #8
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 f857 	bl	8006554 <prvGetNextExpireTime>
 80064a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4619      	mov	r1, r3
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f803 	bl	80064b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064b2:	f000 f8d5 	bl	8006660 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064b6:	e7f1      	b.n	800649c <prvTimerTask+0x8>

080064b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064c2:	f7ff fa39 	bl	8005938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064c6:	f107 0308 	add.w	r3, r7, #8
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f866 	bl	800659c <prvSampleTimeNow>
 80064d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d130      	bne.n	800653a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <prvProcessTimerOrBlockTask+0x3c>
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d806      	bhi.n	80064f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064e6:	f7ff fa35 	bl	8005954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff ff85 	bl	80063fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064f2:	e024      	b.n	800653e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d008      	beq.n	800650c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <prvProcessTimerOrBlockTask+0x90>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <prvProcessTimerOrBlockTask+0x50>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <prvProcessTimerOrBlockTask+0x52>
 8006508:	2300      	movs	r3, #0
 800650a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <prvProcessTimerOrBlockTask+0x94>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	4619      	mov	r1, r3
 800651a:	f7fe ff7d 	bl	8005418 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800651e:	f7ff fa19 	bl	8005954 <xTaskResumeAll>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <prvProcessTimerOrBlockTask+0x98>)
 800652a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	f3bf 8f6f 	isb	sy
}
 8006538:	e001      	b.n	800653e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800653a:	f7ff fa0b 	bl	8005954 <xTaskResumeAll>
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000f0c 	.word	0x20000f0c
 800654c:	20000f10 	.word	0x20000f10
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <prvGetNextExpireTime+0x44>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <prvGetNextExpireTime+0x16>
 8006566:	2201      	movs	r2, #1
 8006568:	e000      	b.n	800656c <prvGetNextExpireTime+0x18>
 800656a:	2200      	movs	r2, #0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <prvGetNextExpireTime+0x44>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e001      	b.n	8006588 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000f08 	.word	0x20000f08

0800659c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065a4:	f7ff fa74 	bl	8005a90 <xTaskGetTickCount>
 80065a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <prvSampleTimeNow+0x3c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d205      	bcs.n	80065c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065b4:	f000 f936 	bl	8006824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e002      	b.n	80065c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <prvSampleTimeNow+0x3c>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000f18 	.word	0x20000f18

080065dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d812      	bhi.n	8006628 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	429a      	cmp	r2, r3
 800660e:	d302      	bcc.n	8006616 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	e01b      	b.n	800664e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <prvInsertTimerInActiveList+0x7c>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3304      	adds	r3, #4
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f7fe f9de 	bl	80049e2 <vListInsert>
 8006626:	e012      	b.n	800664e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d206      	bcs.n	800663e <prvInsertTimerInActiveList+0x62>
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d302      	bcc.n	800663e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e007      	b.n	800664e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <prvInsertTimerInActiveList+0x80>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f7fe f9ca 	bl	80049e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800664e:	697b      	ldr	r3, [r7, #20]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000f0c 	.word	0x20000f0c
 800665c:	20000f08 	.word	0x20000f08

08006660 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08e      	sub	sp, #56	; 0x38
 8006664:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006666:	e0ca      	b.n	80067fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da18      	bge.n	80066a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800666e:	1d3b      	adds	r3, r7, #4
 8006670:	3304      	adds	r3, #4
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	61fb      	str	r3, [r7, #28]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006696:	6850      	ldr	r0, [r2, #4]
 8006698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669a:	6892      	ldr	r2, [r2, #8]
 800669c:	4611      	mov	r1, r2
 800669e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f2c0 80aa 	blt.w	80067fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe f9cb 	bl	8004a54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066be:	463b      	mov	r3, r7
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ff6b 	bl	800659c <prvSampleTimeNow>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	f200 8097 	bhi.w	80067fe <prvProcessReceivedCommands+0x19e>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <prvProcessReceivedCommands+0x78>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006775 	.word	0x08006775
 80066e8:	08006789 	.word	0x08006789
 80066ec:	080067d3 	.word	0x080067d3
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006701 	.word	0x08006701
 80066f8:	08006775 	.word	0x08006775
 80066fc:	08006789 	.word	0x08006789
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	18d1      	adds	r1, r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006720:	f7ff ff5c 	bl	80065dc <prvInsertTimerInActiveList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d069      	beq.n	80067fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006730:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05e      	beq.n	80067fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	441a      	add	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	2100      	movs	r1, #0
 8006750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006752:	f7ff fe05 	bl	8006360 <xTimerGenericCommand>
 8006756:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d14f      	bne.n	80067fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	61bb      	str	r3, [r7, #24]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006786:	e03a      	b.n	80067fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	617b      	str	r3, [r7, #20]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	18d1      	adds	r1, r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067cc:	f7ff ff06 	bl	80065dc <prvInsertTimerInActiveList>
					break;
 80067d0:	e015      	b.n	80067fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d103      	bne.n	80067e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 fbdd 	bl	8006fa0 <vPortFree>
 80067e6:	e00a      	b.n	80067fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067fa:	e000      	b.n	80067fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067fe:	4b08      	ldr	r3, [pc, #32]	; (8006820 <prvProcessReceivedCommands+0x1c0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	1d39      	adds	r1, r7, #4
 8006804:	2200      	movs	r2, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fbec 	bl	8004fe4 <xQueueReceive>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f47f af2a 	bne.w	8006668 <prvProcessReceivedCommands+0x8>
	}
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	3730      	adds	r7, #48	; 0x30
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000f10 	.word	0x20000f10

08006824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800682a:	e048      	b.n	80068be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682c:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006836:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe f905 	bl	8004a54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02e      	beq.n	80068be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d90e      	bls.n	8006890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800687e:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7fe f8aa 	bl	80049e2 <vListInsert>
 800688e:	e016      	b.n	80068be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006890:	2300      	movs	r3, #0
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	2100      	movs	r1, #0
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff fd60 	bl	8006360 <xTimerGenericCommand>
 80068a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	603b      	str	r3, [r7, #0]
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1b1      	bne.n	800682c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <prvSwitchTimerLists+0xc4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a04      	ldr	r2, [pc, #16]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 80068d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068d6:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <prvSwitchTimerLists+0xc4>)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000f08 	.word	0x20000f08
 80068e8:	20000f0c 	.word	0x20000f0c

080068ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068f2:	f000 f967 	bl	8006bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <prvCheckForValidListAndQueue+0x60>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d120      	bne.n	8006940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068fe:	4814      	ldr	r0, [pc, #80]	; (8006950 <prvCheckForValidListAndQueue+0x64>)
 8006900:	f7fe f81e 	bl	8004940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006904:	4813      	ldr	r0, [pc, #76]	; (8006954 <prvCheckForValidListAndQueue+0x68>)
 8006906:	f7fe f81b 	bl	8004940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <prvCheckForValidListAndQueue+0x6c>)
 800690c:	4a10      	ldr	r2, [pc, #64]	; (8006950 <prvCheckForValidListAndQueue+0x64>)
 800690e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006910:	4b12      	ldr	r3, [pc, #72]	; (800695c <prvCheckForValidListAndQueue+0x70>)
 8006912:	4a10      	ldr	r2, [pc, #64]	; (8006954 <prvCheckForValidListAndQueue+0x68>)
 8006914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006916:	2300      	movs	r3, #0
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <prvCheckForValidListAndQueue+0x74>)
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <prvCheckForValidListAndQueue+0x78>)
 800691e:	2110      	movs	r1, #16
 8006920:	200a      	movs	r0, #10
 8006922:	f7fe f929 	bl	8004b78 <xQueueGenericCreateStatic>
 8006926:	4603      	mov	r3, r0
 8006928:	4a08      	ldr	r2, [pc, #32]	; (800694c <prvCheckForValidListAndQueue+0x60>)
 800692a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <prvCheckForValidListAndQueue+0x60>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <prvCheckForValidListAndQueue+0x60>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	490b      	ldr	r1, [pc, #44]	; (8006968 <prvCheckForValidListAndQueue+0x7c>)
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fd42 	bl	80053c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006940:	f000 f970 	bl	8006c24 <vPortExitCritical>
}
 8006944:	bf00      	nop
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000f10 	.word	0x20000f10
 8006950:	20000ee0 	.word	0x20000ee0
 8006954:	20000ef4 	.word	0x20000ef4
 8006958:	20000f08 	.word	0x20000f08
 800695c:	20000f0c 	.word	0x20000f0c
 8006960:	20000fbc 	.word	0x20000fbc
 8006964:	20000f1c 	.word	0x20000f1c
 8006968:	080074d0 	.word	0x080074d0

0800696c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b04      	subs	r3, #4
 800697c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b04      	subs	r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b04      	subs	r3, #4
 800699a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800699c:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <pxPortInitialiseStack+0x64>)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3b14      	subs	r3, #20
 80069a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f06f 0202 	mvn.w	r2, #2
 80069ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3b20      	subs	r3, #32
 80069c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069c2:	68fb      	ldr	r3, [r7, #12]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	080069d5 	.word	0x080069d5

080069d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <prvTaskExitError+0x54>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d00a      	beq.n	80069fe <prvTaskExitError+0x2a>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	60fb      	str	r3, [r7, #12]
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <prvTaskExitError+0x28>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60bb      	str	r3, [r7, #8]
}
 8006a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a12:	bf00      	nop
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0fc      	beq.n	8006a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a1a:	bf00      	nop
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	2000000c 	.word	0x2000000c
 8006a2c:	00000000 	.word	0x00000000

08006a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <pxCurrentTCBConst2>)
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	6808      	ldr	r0, [r1, #0]
 8006a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	f380 8809 	msr	PSP, r0
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8811 	msr	BASEPRI, r0
 8006a4a:	4770      	bx	lr
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst2>:
 8006a50:	200009e0 	.word	0x200009e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a58:	4808      	ldr	r0, [pc, #32]	; (8006a7c <prvPortStartFirstTask+0x24>)
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	6800      	ldr	r0, [r0, #0]
 8006a5e:	f380 8808 	msr	MSP, r0
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8814 	msr	CONTROL, r0
 8006a6a:	b662      	cpsie	i
 8006a6c:	b661      	cpsie	f
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	df00      	svc	0
 8006a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a7a:	bf00      	nop
 8006a7c:	e000ed08 	.word	0xe000ed08

08006a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a86:	4b46      	ldr	r3, [pc, #280]	; (8006ba0 <xPortStartScheduler+0x120>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a46      	ldr	r2, [pc, #280]	; (8006ba4 <xPortStartScheduler+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d10a      	bne.n	8006aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	613b      	str	r3, [r7, #16]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006aa6:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <xPortStartScheduler+0x120>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <xPortStartScheduler+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10a      	bne.n	8006ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60fb      	str	r3, [r7, #12]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <xPortStartScheduler+0x12c>)
 8006ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	22ff      	movs	r2, #255	; 0xff
 8006ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <xPortStartScheduler+0x130>)
 8006aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aee:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006af4:	e009      	b.n	8006b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006af6:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	4a2d      	ldr	r2, [pc, #180]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d0ef      	beq.n	8006af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b16:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1c3 0307 	rsb	r3, r3, #7
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d00a      	beq.n	8006b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60bb      	str	r3, [r7, #8]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b38:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b6e:	f000 f8dd 	bl	8006d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <xPortStartScheduler+0x13c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b78:	f000 f8fc 	bl	8006d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <xPortStartScheduler+0x140>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <xPortStartScheduler+0x140>)
 8006b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b88:	f7ff ff66 	bl	8006a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b8c:	f7ff f84a 	bl	8005c24 <vTaskSwitchContext>
	prvTaskExitError();
 8006b90:	f7ff ff20 	bl	80069d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed00 	.word	0xe000ed00
 8006ba4:	410fc271 	.word	0x410fc271
 8006ba8:	410fc270 	.word	0x410fc270
 8006bac:	e000e400 	.word	0xe000e400
 8006bb0:	2000100c 	.word	0x2000100c
 8006bb4:	20001010 	.word	0x20001010
 8006bb8:	e000ed20 	.word	0xe000ed20
 8006bbc:	2000000c 	.word	0x2000000c
 8006bc0:	e000ef34 	.word	0xe000ef34

08006bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	607b      	str	r3, [r7, #4]
}
 8006bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bde:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <vPortEnterCritical+0x58>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <vPortEnterCritical+0x58>)
 8006be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006be8:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <vPortEnterCritical+0x58>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10f      	bne.n	8006c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <vPortEnterCritical+0x5c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	603b      	str	r3, [r7, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vPortEnterCritical+0x4a>
	}
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	2000000c 	.word	0x2000000c
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <vPortExitCritical+0x50>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <vPortExitCritical+0x24>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	607b      	str	r3, [r7, #4]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <vPortExitCritical+0x50>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <vPortExitCritical+0x50>)
 8006c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <vPortExitCritical+0x50>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <vPortExitCritical+0x42>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f383 8811 	msr	BASEPRI, r3
}
 8006c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000000c 	.word	0x2000000c
	...

08006c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c80:	f3ef 8009 	mrs	r0, PSP
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <pxCurrentTCBConst>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	f01e 0f10 	tst.w	lr, #16
 8006c90:	bf08      	it	eq
 8006c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	6010      	str	r0, [r2, #0]
 8006c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ca4:	f380 8811 	msr	BASEPRI, r0
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f7fe ffb8 	bl	8005c24 <vTaskSwitchContext>
 8006cb4:	f04f 0000 	mov.w	r0, #0
 8006cb8:	f380 8811 	msr	BASEPRI, r0
 8006cbc:	bc09      	pop	{r0, r3}
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	6808      	ldr	r0, [r1, #0]
 8006cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc6:	f01e 0f10 	tst.w	lr, #16
 8006cca:	bf08      	it	eq
 8006ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cd0:	f380 8809 	msr	PSP, r0
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w

08006ce0 <pxCurrentTCBConst>:
 8006ce0:	200009e0 	.word	0x200009e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d02:	f7fe fed5 	bl	8005ab0 <xTaskIncrementTick>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <xPortSysTickHandler+0x40>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <vPortSetupTimerInterrupt+0x38>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <vPortSetupTimerInterrupt+0x3c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <vPortSetupTimerInterrupt+0x40>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <vPortSetupTimerInterrupt+0x44>)
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d50:	2207      	movs	r2, #7
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	e000e010 	.word	0xe000e010
 8006d64:	e000e018 	.word	0xe000e018
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	10624dd3 	.word	0x10624dd3
 8006d70:	e000e014 	.word	0xe000e014

08006d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d84 <vPortEnableVFP+0x10>
 8006d78:	6801      	ldr	r1, [r0, #0]
 8006d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d7e:	6001      	str	r1, [r0, #0]
 8006d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d82:	bf00      	nop
 8006d84:	e000ed88 	.word	0xe000ed88

08006d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d8e:	f3ef 8305 	mrs	r3, IPSR
 8006d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b0f      	cmp	r3, #15
 8006d98:	d914      	bls.n	8006dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <vPortValidateInterruptPriority+0x70>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <vPortValidateInterruptPriority+0x74>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	7afa      	ldrb	r2, [r7, #11]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d20a      	bcs.n	8006dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <vPortValidateInterruptPriority+0x78>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <vPortValidateInterruptPriority+0x7c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d90a      	bls.n	8006dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	603b      	str	r3, [r7, #0]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <vPortValidateInterruptPriority+0x60>
	}
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	e000e3f0 	.word	0xe000e3f0
 8006dfc:	2000100c 	.word	0x2000100c
 8006e00:	e000ed0c 	.word	0xe000ed0c
 8006e04:	20001010 	.word	0x20001010

08006e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e14:	f7fe fd90 	bl	8005938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e18:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <pvPortMalloc+0x180>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e20:	f000 f920 	bl	8007064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <pvPortMalloc+0x184>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 8093 	bne.w	8006f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01d      	beq.n	8006e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e38:	2208      	movs	r2, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f023 0307 	bic.w	r3, r3, #7
 8006e50:	3308      	adds	r3, #8
 8006e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <pvPortMalloc+0x6c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	617b      	str	r3, [r7, #20]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d06e      	beq.n	8006f58 <pvPortMalloc+0x150>
 8006e7a:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <pvPortMalloc+0x188>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d869      	bhi.n	8006f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e84:	4b43      	ldr	r3, [pc, #268]	; (8006f94 <pvPortMalloc+0x18c>)
 8006e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e88:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <pvPortMalloc+0x18c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8e:	e004      	b.n	8006e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <pvPortMalloc+0xa4>
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f1      	bne.n	8006e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eac:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <pvPortMalloc+0x180>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d050      	beq.n	8006f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	4413      	add	r3, r2
 8006ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d91f      	bls.n	8006f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <pvPortMalloc+0xf8>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	613b      	str	r3, [r7, #16]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f12:	69b8      	ldr	r0, [r7, #24]
 8006f14:	f000 f908 	bl	8007128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <pvPortMalloc+0x188>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <pvPortMalloc+0x188>)
 8006f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f26:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <pvPortMalloc+0x188>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <pvPortMalloc+0x190>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d203      	bcs.n	8006f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <pvPortMalloc+0x188>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <pvPortMalloc+0x190>)
 8006f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <pvPortMalloc+0x184>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <pvPortMalloc+0x194>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a11      	ldr	r2, [pc, #68]	; (8006f9c <pvPortMalloc+0x194>)
 8006f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f58:	f7fe fcfc 	bl	8005954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <pvPortMalloc+0x174>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <pvPortMalloc+0x172>
	return pvReturn;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20004c1c 	.word	0x20004c1c
 8006f8c:	20004c30 	.word	0x20004c30
 8006f90:	20004c20 	.word	0x20004c20
 8006f94:	20004c14 	.word	0x20004c14
 8006f98:	20004c24 	.word	0x20004c24
 8006f9c:	20004c28 	.word	0x20004c28

08006fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d04d      	beq.n	800704e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	4b24      	ldr	r3, [pc, #144]	; (8007058 <vPortFree+0xb8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <vPortFree+0x44>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <vPortFree+0x62>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <vPortFree+0xb8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01e      	beq.n	800704e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d11a      	bne.n	800704e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <vPortFree+0xb8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007028:	f7fe fc86 	bl	8005938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <vPortFree+0xbc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4413      	add	r3, r2
 8007036:	4a09      	ldr	r2, [pc, #36]	; (800705c <vPortFree+0xbc>)
 8007038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f000 f874 	bl	8007128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <vPortFree+0xc0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	4a06      	ldr	r2, [pc, #24]	; (8007060 <vPortFree+0xc0>)
 8007048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800704a:	f7fe fc83 	bl	8005954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800704e:	bf00      	nop
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20004c30 	.word	0x20004c30
 800705c:	20004c20 	.word	0x20004c20
 8007060:	20004c2c 	.word	0x20004c2c

08007064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800706a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800706e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007070:	4b27      	ldr	r3, [pc, #156]	; (8007110 <prvHeapInit+0xac>)
 8007072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <prvHeapInit+0xac>)
 8007094:	4413      	add	r3, r2
 8007096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800709c:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <prvHeapInit+0xb0>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <prvHeapInit+0xb0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070b0:	2208      	movs	r2, #8
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <prvHeapInit+0xb4>)
 80070c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <prvHeapInit+0xb4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <prvHeapInit+0xb4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvHeapInit+0xb4>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a0a      	ldr	r2, [pc, #40]	; (800711c <prvHeapInit+0xb8>)
 80070f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a09      	ldr	r2, [pc, #36]	; (8007120 <prvHeapInit+0xbc>)
 80070fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <prvHeapInit+0xc0>)
 80070fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007102:	601a      	str	r2, [r3, #0]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20001014 	.word	0x20001014
 8007114:	20004c14 	.word	0x20004c14
 8007118:	20004c1c 	.word	0x20004c1c
 800711c:	20004c24 	.word	0x20004c24
 8007120:	20004c20 	.word	0x20004c20
 8007124:	20004c30 	.word	0x20004c30

08007128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <prvInsertBlockIntoFreeList+0xac>)
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e002      	b.n	800713c <prvInsertBlockIntoFreeList+0x14>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d8f7      	bhi.n	8007136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d108      	bne.n	800716a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	441a      	add	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d118      	bne.n	80071b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d00d      	beq.n	80071a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	441a      	add	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e008      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e003      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d002      	beq.n	80071c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20004c14 	.word	0x20004c14
 80071d8:	20004c1c 	.word	0x20004c1c

080071dc <__NVIC_EnableIRQ>:
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	db0b      	blt.n	8007206 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	f003 021f 	and.w	r2, r3, #31
 80071f4:	4907      	ldr	r1, [pc, #28]	; (8007214 <__NVIC_EnableIRQ+0x38>)
 80071f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2001      	movs	r0, #1
 80071fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	e000e100 	.word	0xe000e100

08007218 <I2C1_EV_IRQHandler>:

/**********************
 *	DECLARATIONS
 **********************/
void I2C1_EV_IRQHandler()
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800721c:	4802      	ldr	r0, [pc, #8]	; (8007228 <I2C1_EV_IRQHandler+0x10>)
 800721e:	f7fa fa47 	bl	80016b0 <HAL_I2C_EV_IRQHandler>
    return;
 8007222:	bf00      	nop
}
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000090 	.word	0x20000090

0800722c <i2c_thread>:
//    static int t = 0;
//    t++;
//    return;
//}

void i2c_thread(void * arg){
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007234:	201f      	movs	r0, #31
 8007236:	f7ff ffd1 	bl	80071dc <__NVIC_EnableIRQ>
	uint8_t buffer[8] = {1,2,3,4,5,6,7,8};
 800723a:	4a07      	ldr	r2, [pc, #28]	; (8007258 <i2c_thread+0x2c>)
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007244:	e883 0003 	stmia.w	r3, {r0, r1}



	for(;;){
		HAL_I2C_Slave_Transmit_IT(&hi2c1, buffer, sizeof(buffer));
 8007248:	f107 0308 	add.w	r3, r7, #8
 800724c:	2208      	movs	r2, #8
 800724e:	4619      	mov	r1, r3
 8007250:	4802      	ldr	r0, [pc, #8]	; (800725c <i2c_thread+0x30>)
 8007252:	f7fa f9bd 	bl	80015d0 <HAL_I2C_Slave_Transmit_IT>
 8007256:	e7f7      	b.n	8007248 <i2c_thread+0x1c>
 8007258:	080074d8 	.word	0x080074d8
 800725c:	20000090 	.word	0x20000090

08007260 <threads_init>:
/**********************
 *	DECLARATIONS
 **********************/


void threads_init(void) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af04      	add	r7, sp, #16
	CREATE_THREAD(i2c_handle, i2c, i2c_thread, I2C_PRIO, I2C_SZ, 0);
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <threads_init+0x2c>)
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <threads_init+0x30>)
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2300      	movs	r3, #0
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007278:	4906      	ldr	r1, [pc, #24]	; (8007294 <threads_init+0x34>)
 800727a:	4807      	ldr	r0, [pc, #28]	; (8007298 <threads_init+0x38>)
 800727c:	f7fe f900 	bl	8005480 <xTaskCreateStatic>
 8007280:	4603      	mov	r3, r0
 8007282:	4a06      	ldr	r2, [pc, #24]	; (800729c <threads_init+0x3c>)
 8007284:	6013      	str	r3, [r2, #0]
}
 8007286:	bf00      	nop
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20005c38 	.word	0x20005c38
 8007290:	20004c38 	.word	0x20004c38
 8007294:	080074e0 	.word	0x080074e0
 8007298:	0800722d 	.word	0x0800722d
 800729c:	20004c34 	.word	0x20004c34

080072a0 <__libc_init_array>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	4d0d      	ldr	r5, [pc, #52]	; (80072d8 <__libc_init_array+0x38>)
 80072a4:	4c0d      	ldr	r4, [pc, #52]	; (80072dc <__libc_init_array+0x3c>)
 80072a6:	1b64      	subs	r4, r4, r5
 80072a8:	10a4      	asrs	r4, r4, #2
 80072aa:	2600      	movs	r6, #0
 80072ac:	42a6      	cmp	r6, r4
 80072ae:	d109      	bne.n	80072c4 <__libc_init_array+0x24>
 80072b0:	4d0b      	ldr	r5, [pc, #44]	; (80072e0 <__libc_init_array+0x40>)
 80072b2:	4c0c      	ldr	r4, [pc, #48]	; (80072e4 <__libc_init_array+0x44>)
 80072b4:	f000 f8f2 	bl	800749c <_init>
 80072b8:	1b64      	subs	r4, r4, r5
 80072ba:	10a4      	asrs	r4, r4, #2
 80072bc:	2600      	movs	r6, #0
 80072be:	42a6      	cmp	r6, r4
 80072c0:	d105      	bne.n	80072ce <__libc_init_array+0x2e>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c8:	4798      	blx	r3
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7ee      	b.n	80072ac <__libc_init_array+0xc>
 80072ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d2:	4798      	blx	r3
 80072d4:	3601      	adds	r6, #1
 80072d6:	e7f2      	b.n	80072be <__libc_init_array+0x1e>
 80072d8:	08007588 	.word	0x08007588
 80072dc:	08007588 	.word	0x08007588
 80072e0:	08007588 	.word	0x08007588
 80072e4:	0800758c 	.word	0x0800758c

080072e8 <__retarget_lock_acquire_recursive>:
 80072e8:	4770      	bx	lr

080072ea <__retarget_lock_release_recursive>:
 80072ea:	4770      	bx	lr

080072ec <memcpy>:
 80072ec:	440a      	add	r2, r1
 80072ee:	4291      	cmp	r1, r2
 80072f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f4:	d100      	bne.n	80072f8 <memcpy+0xc>
 80072f6:	4770      	bx	lr
 80072f8:	b510      	push	{r4, lr}
 80072fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007302:	4291      	cmp	r1, r2
 8007304:	d1f9      	bne.n	80072fa <memcpy+0xe>
 8007306:	bd10      	pop	{r4, pc}

08007308 <memset>:
 8007308:	4402      	add	r2, r0
 800730a:	4603      	mov	r3, r0
 800730c:	4293      	cmp	r3, r2
 800730e:	d100      	bne.n	8007312 <memset+0xa>
 8007310:	4770      	bx	lr
 8007312:	f803 1b01 	strb.w	r1, [r3], #1
 8007316:	e7f9      	b.n	800730c <memset+0x4>

08007318 <cleanup_glue>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	460c      	mov	r4, r1
 800731c:	6809      	ldr	r1, [r1, #0]
 800731e:	4605      	mov	r5, r0
 8007320:	b109      	cbz	r1, 8007326 <cleanup_glue+0xe>
 8007322:	f7ff fff9 	bl	8007318 <cleanup_glue>
 8007326:	4621      	mov	r1, r4
 8007328:	4628      	mov	r0, r5
 800732a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800732e:	f000 b869 	b.w	8007404 <_free_r>
	...

08007334 <_reclaim_reent>:
 8007334:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <_reclaim_reent+0xb4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4283      	cmp	r3, r0
 800733a:	b570      	push	{r4, r5, r6, lr}
 800733c:	4604      	mov	r4, r0
 800733e:	d051      	beq.n	80073e4 <_reclaim_reent+0xb0>
 8007340:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007342:	b143      	cbz	r3, 8007356 <_reclaim_reent+0x22>
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d14a      	bne.n	80073e0 <_reclaim_reent+0xac>
 800734a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800734c:	6819      	ldr	r1, [r3, #0]
 800734e:	b111      	cbz	r1, 8007356 <_reclaim_reent+0x22>
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f857 	bl	8007404 <_free_r>
 8007356:	6961      	ldr	r1, [r4, #20]
 8007358:	b111      	cbz	r1, 8007360 <_reclaim_reent+0x2c>
 800735a:	4620      	mov	r0, r4
 800735c:	f000 f852 	bl	8007404 <_free_r>
 8007360:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007362:	b111      	cbz	r1, 800736a <_reclaim_reent+0x36>
 8007364:	4620      	mov	r0, r4
 8007366:	f000 f84d 	bl	8007404 <_free_r>
 800736a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800736c:	b111      	cbz	r1, 8007374 <_reclaim_reent+0x40>
 800736e:	4620      	mov	r0, r4
 8007370:	f000 f848 	bl	8007404 <_free_r>
 8007374:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007376:	b111      	cbz	r1, 800737e <_reclaim_reent+0x4a>
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f843 	bl	8007404 <_free_r>
 800737e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007380:	b111      	cbz	r1, 8007388 <_reclaim_reent+0x54>
 8007382:	4620      	mov	r0, r4
 8007384:	f000 f83e 	bl	8007404 <_free_r>
 8007388:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800738a:	b111      	cbz	r1, 8007392 <_reclaim_reent+0x5e>
 800738c:	4620      	mov	r0, r4
 800738e:	f000 f839 	bl	8007404 <_free_r>
 8007392:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007394:	b111      	cbz	r1, 800739c <_reclaim_reent+0x68>
 8007396:	4620      	mov	r0, r4
 8007398:	f000 f834 	bl	8007404 <_free_r>
 800739c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800739e:	b111      	cbz	r1, 80073a6 <_reclaim_reent+0x72>
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 f82f 	bl	8007404 <_free_r>
 80073a6:	69a3      	ldr	r3, [r4, #24]
 80073a8:	b1e3      	cbz	r3, 80073e4 <_reclaim_reent+0xb0>
 80073aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073ac:	4620      	mov	r0, r4
 80073ae:	4798      	blx	r3
 80073b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073b2:	b1b9      	cbz	r1, 80073e4 <_reclaim_reent+0xb0>
 80073b4:	4620      	mov	r0, r4
 80073b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073ba:	f7ff bfad 	b.w	8007318 <cleanup_glue>
 80073be:	5949      	ldr	r1, [r1, r5]
 80073c0:	b941      	cbnz	r1, 80073d4 <_reclaim_reent+0xa0>
 80073c2:	3504      	adds	r5, #4
 80073c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c6:	2d80      	cmp	r5, #128	; 0x80
 80073c8:	68d9      	ldr	r1, [r3, #12]
 80073ca:	d1f8      	bne.n	80073be <_reclaim_reent+0x8a>
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 f819 	bl	8007404 <_free_r>
 80073d2:	e7ba      	b.n	800734a <_reclaim_reent+0x16>
 80073d4:	680e      	ldr	r6, [r1, #0]
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 f814 	bl	8007404 <_free_r>
 80073dc:	4631      	mov	r1, r6
 80073de:	e7ef      	b.n	80073c0 <_reclaim_reent+0x8c>
 80073e0:	2500      	movs	r5, #0
 80073e2:	e7ef      	b.n	80073c4 <_reclaim_reent+0x90>
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
 80073e6:	bf00      	nop
 80073e8:	20000010 	.word	0x20000010

080073ec <__malloc_lock>:
 80073ec:	4801      	ldr	r0, [pc, #4]	; (80073f4 <__malloc_lock+0x8>)
 80073ee:	f7ff bf7b 	b.w	80072e8 <__retarget_lock_acquire_recursive>
 80073f2:	bf00      	nop
 80073f4:	20005cf4 	.word	0x20005cf4

080073f8 <__malloc_unlock>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__malloc_unlock+0x8>)
 80073fa:	f7ff bf76 	b.w	80072ea <__retarget_lock_release_recursive>
 80073fe:	bf00      	nop
 8007400:	20005cf4 	.word	0x20005cf4

08007404 <_free_r>:
 8007404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007406:	2900      	cmp	r1, #0
 8007408:	d044      	beq.n	8007494 <_free_r+0x90>
 800740a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740e:	9001      	str	r0, [sp, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f1a1 0404 	sub.w	r4, r1, #4
 8007416:	bfb8      	it	lt
 8007418:	18e4      	addlt	r4, r4, r3
 800741a:	f7ff ffe7 	bl	80073ec <__malloc_lock>
 800741e:	4a1e      	ldr	r2, [pc, #120]	; (8007498 <_free_r+0x94>)
 8007420:	9801      	ldr	r0, [sp, #4]
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	b933      	cbnz	r3, 8007434 <_free_r+0x30>
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	6014      	str	r4, [r2, #0]
 800742a:	b003      	add	sp, #12
 800742c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007430:	f7ff bfe2 	b.w	80073f8 <__malloc_unlock>
 8007434:	42a3      	cmp	r3, r4
 8007436:	d908      	bls.n	800744a <_free_r+0x46>
 8007438:	6825      	ldr	r5, [r4, #0]
 800743a:	1961      	adds	r1, r4, r5
 800743c:	428b      	cmp	r3, r1
 800743e:	bf01      	itttt	eq
 8007440:	6819      	ldreq	r1, [r3, #0]
 8007442:	685b      	ldreq	r3, [r3, #4]
 8007444:	1949      	addeq	r1, r1, r5
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	e7ed      	b.n	8007426 <_free_r+0x22>
 800744a:	461a      	mov	r2, r3
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b10b      	cbz	r3, 8007454 <_free_r+0x50>
 8007450:	42a3      	cmp	r3, r4
 8007452:	d9fa      	bls.n	800744a <_free_r+0x46>
 8007454:	6811      	ldr	r1, [r2, #0]
 8007456:	1855      	adds	r5, r2, r1
 8007458:	42a5      	cmp	r5, r4
 800745a:	d10b      	bne.n	8007474 <_free_r+0x70>
 800745c:	6824      	ldr	r4, [r4, #0]
 800745e:	4421      	add	r1, r4
 8007460:	1854      	adds	r4, r2, r1
 8007462:	42a3      	cmp	r3, r4
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	d1e0      	bne.n	800742a <_free_r+0x26>
 8007468:	681c      	ldr	r4, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	6053      	str	r3, [r2, #4]
 800746e:	4421      	add	r1, r4
 8007470:	6011      	str	r1, [r2, #0]
 8007472:	e7da      	b.n	800742a <_free_r+0x26>
 8007474:	d902      	bls.n	800747c <_free_r+0x78>
 8007476:	230c      	movs	r3, #12
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	e7d6      	b.n	800742a <_free_r+0x26>
 800747c:	6825      	ldr	r5, [r4, #0]
 800747e:	1961      	adds	r1, r4, r5
 8007480:	428b      	cmp	r3, r1
 8007482:	bf04      	itt	eq
 8007484:	6819      	ldreq	r1, [r3, #0]
 8007486:	685b      	ldreq	r3, [r3, #4]
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	bf04      	itt	eq
 800748c:	1949      	addeq	r1, r1, r5
 800748e:	6021      	streq	r1, [r4, #0]
 8007490:	6054      	str	r4, [r2, #4]
 8007492:	e7ca      	b.n	800742a <_free_r+0x26>
 8007494:	b003      	add	sp, #12
 8007496:	bd30      	pop	{r4, r5, pc}
 8007498:	20005cf8 	.word	0x20005cf8

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr
